version: "2"

tasks:
  pr-code-checks:
    displayName: "Build amd64 image"
    onError: stopAndFail
    include:
      - dind
    steps:
      - name: unit-test
        image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3
        include:
          - docker-socket
        script: |
          #!/usr/bin/env bash
          if [[ "\$PIPELINE_DEBUG" == 1 ]]; then
              trap env EXIT
              env
              set -x
          fi
          source $WORKSPACE/$APP_REPO_FOLDER/ci/sps-scripts/sps-build-container-image-task.sh linux/amd64
      - name: detect-secrets
        include:
          - docker-socket

  pr-code-checks-2:
    from: pr-code-checks
    displayName: "Build arm64 image"
    onError: stopAndFail
    include:
      - dind
    steps:
      - name: unit-test
        image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3
        include:
          - docker-socket
        script: |
          #!/usr/bin/env bash
          if [[ "\$PIPELINE_DEBUG" == 1 ]]; then
              trap env EXIT
              env
              set -x
          fi
          source $WORKSPACE/$APP_REPO_FOLDER/ci/sps-scripts/sps-build-container-image-task.sh linux/arm64
      - name: detect-secrets
        include:
          - docker-socket

  pr-code-checks-3:
    from: pr-code-checks
    displayName: "Build s390x image"
    onError: stopAndFail
    include:
      - dind
    steps:
      - name: unit-test
        image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3
        include:
          - docker-socket
        script: |
          #!/usr/bin/env bash
          if [[ "\$PIPELINE_DEBUG" == 1 ]]; then
              trap env EXIT
              env
              set -x
          fi
          source $WORKSPACE/$APP_REPO_FOLDER/ci/sps-scripts/sps-build-container-image-task.sh linux/s390x
      - name: detect-secrets
        include:
          - docker-socket

  pr-code-checks-4:
    from: pr-code-checks
    displayName: "Build ppc64le image"
    onError: stopAndFail
    include:
      - dind
    steps:
      - name: unit-test
        image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3
        include:
          - docker-socket
        script: |
          #!/usr/bin/env bash
          if [[ "\$PIPELINE_DEBUG" == 1 ]]; then
              trap env EXIT
              env
              set -x
          fi
          source $WORKSPACE/$APP_REPO_FOLDER/ci/sps-scripts/sps-build-container-image-task.sh linux/ppc64le
      - name: detect-secrets
        include:
          - docker-socket

  pr-code-checks-5:
    from: pr-code-checks
    displayName: "Build and test agent operator"
    onError: stopAndFail
    include:
      - dind
    steps:
      - name: unit-test
        image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3
        include:
          - docker-socket
        script: |
          #!/usr/bin/env bash
          if [[ "\$PIPELINE_DEBUG" == 1 ]]; then
              trap env EXIT
              env
              set -x
          fi
          pwd
          dnf -y install microdnf
          source $WORKSPACE/$APP_REPO_FOLDER/installGolang.sh 1.24.4
          export PATH=$PATH:/usr/local/go/bin
          go install
          make build
      - name: detect-secrets
        include:
          - docker-socket
    
  pr-code-checks-6:
    from: pr-code-checks
    displayName: "Unit test"
    onError: stopAndFail
    include:
      - dind
    steps:
      - name: unit-test
        image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3
        include:
          - docker-socket
        script: |
          #!/usr/bin/env bash
          if [[ "\$PIPELINE_DEBUG" == 1 ]]; then
              trap env EXIT
              env
              set -x
          fi
          pwd
          dnf -y install microdnf
          source $WORKSPACE/$APP_REPO_FOLDER/installGolang.sh 1.24.4
          export PATH=$PATH:/usr/local/go/bin
      
          go install
          make gen-mocks lint test
      - name: detect-secrets
        include:
          - docker-socket

  pr-code-checks-7:
    from: pr-code-checks
    displayName: "create-tag-files"
    onError: stopAndFail
    runAfter:
      - pr-code-checks
      - pr-code-checks-2
      - pr-code-checks-3
      - pr-code-checks-4
    include:
      - dind
    steps:
      - name: unit-test
        image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3
        include:
          - docker-socket
        script: |
          #!/usr/bin/env bash
           if [[ "\$PIPELINE_DEBUG" == 1 ]]; then
               trap env EXIT
               env
               set -x
           fi
           set -e
           mkdir -p image-tags
           cat << EOF > image-tags/amd64
           ${image-amd64/image.tar}-amd64
           EOF
           cat << EOF > image-tags/arm64
           ${image-arm64/image.tar}-arm64
           EOF
           cat << EOF > image-tags/ppc64le
           ${image-ppc64/leimage.tar}-ppc64le
           EOF
           cat << EOF > image-tags/s390x
           ${image-s390x/image.tar}-s390x
           EOF
      - name: detect-secrets
        include:
          - docker-socket

  pr-code-checks-8:
    from: pr-code-checks
    displayName: operator-olm-build
    include:
      - dind
    steps:
      - name: unit-test
        image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3
        include:
          - docker-socket
        script: |
          #!/usr/bin/env bash
          set -ceu
          if [[ "$PIPELINE_DEBUG" == 1 ]]; then
            trap env EXIT
            env
            set -x
          fi
          export GIT_COMMIT="$(get_env branch || echo "latest")"
          export ARTIFACTORY_INTERNAL_USERNAME=$(get_env ARTIFACTORY_INTERNAL_USERNAME)
          export ARTIFACTORY_INTERNAL_PASSWORD=$(get_env ARTIFACTORY_INTERNAL_PASSWORD)

          dnf -y install microdnf
          source $WORKSPACE/$APP_REPO_FOLDER/installGolang.sh 1.24.4
          export PATH=$PATH:/usr/local/go/bin

          IMAGE_TAG=${GIT_COMMIT}
          echo "Using IMAGE_TAG=${IMAGE_TAG}"
          unset HISTFILE
          skopeo login -u ${ARTIFACTORY_INTERNAL_USERNAME} -p ${ARTIFACTORY_INTERNAL_PASSWORD} delivery.instana.io

          OPERATOR_IMAGE_NAME=delivery.instana.io/int-docker-agent-local/instana-agent-operator/dev-build
          OPERATOR_IMG_DIGEST=$(skopeo inspect --format "{{.Digest}}" docker://${OPERATOR_IMAGE_NAME}:${IMAGE_TAG})
          echo "OPERATOR_IMG_DIGEST=$OPERATOR_IMG_DIGEST"
 
          mkdir -p target
          mkdir -p bundle
          mkdir -p ../docker-input

          # strip the leading "v" from the operator version for github artefacts and release:
          export PREFIX="v"
          export VERSION="0.0.1"
          export OLM_RELEASE_VERSION=${VERSION#"$PREFIX"}

          # Get currently published version of the OLM bundle in the community operators project, so we can correctly set the 'replaces' field
          # Uses jq to filter out non-release versions
          export PREV_VERSION=$(curl --silent --fail --show-error -L https://api.github.com/repos/instana/instana-agent-operator/tags \
            | jq 'map(select(.name | test("^v[0-9]+.[0-9]+.[0-9]+$"))) | .[1].name' \
            | sed 's/[^0-9]*\([0-9]\+\.[0-9]\+\.[0-9]\+\).*/\1/')

          if [[ "x${PREV_VERSION}" = "x" ]]; then
              echo "!! Could not determine previous released version. Fix either pipeline or tag history !!"
              exit 1
          fi

          echo "Operator manifest SHA found, using digest ${OPERATOR_IMG_DIGEST} for Operator image"
          export OPERATOR_IMAGE="${OPERATOR_IMAGE_NAME}@${OPERATOR_IMG_DIGEST}"

          # Get the digest for the agent image
          AGENT_IMAGE_NAME="icr.io/instana/agent"
          AGENT_IMAGE_TAG="latest"
          echo "Fetching digest for ${AGENT_IMAGE_NAME}:${AGENT_IMAGE_TAG}"
          export AGENT_IMG_DIGEST=$(skopeo inspect --format "{{.Digest}}" docker://${AGENT_IMAGE_NAME}:${AGENT_IMAGE_TAG})
          echo "AGENT_IMG_DIGEST=$AGENT_IMG_DIGEST"


          # Create bundle for public operator with image: delivery.instana.io/int-docker-agent-local/instana-agent-operator/dev-build:<version>
          make IMG="${OPERATOR_IMAGE}" \
            VERSION="${OLM_RELEASE_VERSION}" \
            PREV_VERSION="${PREV_VERSION}" \
            AGENT_IMG="icr.io/instana/agent@${AGENT_IMG_DIGEST}" \
            bundle

          cp bundle.Dockerfile ../docker-input/
          cp -R bundle ../docker-input/
          pushd bundle
          zip -r ../../target/olm-${OLM_RELEASE_VERSION}.zip .
          popd

          # Create the YAML for installing the Agent Operator, which we want to package with the release
          make --silent IMG="${OPERATOR_IMAGE_NAME}:${OLM_RELEASE_VERSION}" controller-yaml > ../target/instana-agent-operator.yaml

          echo -e "===== DISPLAYING target/instana-agent-operator.yaml =====\n"
          cat ../target/instana-agent-operator.yaml
      - name: detect-secrets
        include:
          - docker-socket

  pr-code-checks-9:
    from: pr-code-checks
    displayName: build-e2e-operator-base-image
    onError: stopAndFail
    include:
      - dind
    steps:
      - name: unit-test
        image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3
        include:
          - docker-socket
        script: |
          #!/usr/bin/env bash
          if [[ "$PIPELINE_DEBUG" == 1 ]]; then
            trap env EXIT
            env
            set -x
          fi 
          source $WORKSPACE/$APP_REPO_FOLDER/ci/sps-scripts/build-operator-image.sh
      - name: detect-secrets
        include:
          - docker-socket

  pr-code-checks-10:
    from: pr-code-checks
    displayName: e2e-ocp-latest
    runAfter:
      - pr-code-checks
      - pr-code-checks-2
      - pr-code-checks-3
      - pr-code-checks-4
      - pr-code-checks-5
      - pr-code-checks-6
      - pr-code-checks-7
      - pr-code-checks-8
    include:
      - dind
    steps:
      - name: unit-test
        image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3
        include:
          - docker-socket
        script: |
          #!/usr/bin/env bash
          if [[ "$PIPELINE_DEBUG" == 1 ]]; then
            trap env EXIT
            env
            set -x
          fi
          if [[ "$(get_env run-ocp-fyre-latest)" == "false" ]]; then
              echo "skipping tests due to run-ocp-fyre-latest being false"
              exit 0
          fi
          SKIP_INSTALL_GCLOUD=true
          source $WORKSPACE/$APP_REPO_FOLDER/ci/sps-scripts/setup.sh
          source $WORKSPACE/$APP_REPO_FOLDER/ci/sps-scripts/build.sh
          source $WORKSPACE/$APP_REPO_FOLDER/ci/sps-scripts/e2e.sh ocp-fyre-latest pr-code-checks-10
      - name: detect-secrets
        include:
          - docker-socket

  pr-code-checks-11:
    from: pr-code-checks
    displayName: e2e-gke-latest
    runAfter:
      - pr-code-checks
      - pr-code-checks-2
      - pr-code-checks-3
      - pr-code-checks-4
      - pr-code-checks-5
      - pr-code-checks-6
      - pr-code-checks-7
      - pr-code-checks-8
    include:
      - dind
    steps:
      - name: unit-test
        image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3
        include:
          - docker-socket
        script: |
          #!/usr/bin/env bash
          if [[ "$PIPELINE_DEBUG" == 1 ]]; then
            trap env EXIT
            env
            set -x
          fi
          if [[ "$(get_env run-gke-latest)" == "false" ]]; then
              echo "skipping tests due to run-gke-latest being false"
              exit 0
          fi
          source $WORKSPACE/$APP_REPO_FOLDER/ci/sps-scripts/setup.sh
          source $WORKSPACE/$APP_REPO_FOLDER/ci/sps-scripts/build.sh
          source $WORKSPACE/$APP_REPO_FOLDER/ci/sps-scripts/e2e.sh gke-latest pr-code-checks-11
      - name: detect-secrets
        include:
          - docker-socket
  
  pr-code-checks-12:
    from: pr-code-checks
    displayName: publish-manifest-list
    runAfter:
      - pr-code-checks-7
    include:
      - dind
    steps:
      - name: unit-test
        image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3
        include:
          - docker-socket
        script: |
          #!/usr/bin/env bash
          if [[ "$PIPELINE_DEBUG" == 1 ]]; then
            trap env EXIT
            env
            set -x
          fi
          export ARTIFACTORY_INTERNAL_USERNAME=$(get_env ARTIFACTORY_INTERNAL_USERNAME)
          export ARTIFACTORY_INTERNAL_PASSWORD=$(get_env ARTIFACTORY_INTERNAL_PASSWORD)
          export GIT_COMMIT="$(get_env branch || echo "latest")"
          export IMAGE_TAG=${GIT_COMMIT}

          mkdir -p manifest-list
          
          OPERATOR_IMAGE_NAME=delivery.instana.io/int-docker-agent-local/instana-agent-operator/dev-build

          dnf -y install microdnf
          source $WORKSPACE/$APP_REPO_FOLDER/installGolang.sh 1.24.4
          export PATH=$PATH:/usr/local/go/bin

          git clone https://github.com/estesp/manifest-tool
          cd manifest-tool && make binary
          export PATH=$PATH:$(pwd)
          
          # installing manifest-tool
          manifest-tool \
            --username ${ARTIFACTORY_INTERNAL_USERNAME} \
            --password ${ARTIFACTORY_INTERNAL_PASSWORD} \
            push from-args \
            --platforms linux/amd64,linux/arm64,linux/ppc64le,linux/s390x \
            --template ${OPERATOR_IMAGE_NAME}:${IMAGE_TAG}-ARCH \
            --target ${OPERATOR_IMAGE_NAME}:${IMAGE_TAG} | tee manifest-output.txt

          OPERATOR_IMG_DIGEST=$(awk '{ print $2 }' manifest-output.txt)
          echo "OPERATOR_IMG_DIGEST=$OPERATOR_IMG_DIGEST"
          echo ${OPERATOR_IMG_DIGEST} > manifest-list/digest
      - name: detect-secrets
        include:
          - docker-socket
