#
# (c) Copyright IBM Corp. 2024
# (c) Copyright Instana Inc.
#
var:
  instana-operator-git-repo-config: &instana-operator-git-repo-config
    uri: https://github.com/instana/instana-agent-operator.git
    branch: main
    username: instanacd
    password: ((instanacd-github-api-token))

resource_types:
  - name: cogito
    type: registry-image
    check_every: never
    source:
      repository: delivery.instana.io/int-docker-cogito-instana-local/cogito
      tag: latest
      username: ((delivery-instana-io-internal-project-artifact-read-writer-creds.username))
      password: ((delivery-instana-io-internal-project-artifact-read-writer-creds.password))
  - name: key-value
    type: registry-image
    source:
      repository: gstack/keyval-resource

resources:
  - name: pipeline-source
    type: git
    icon: github
    source:
      <<: *instana-operator-git-repo-config
      paths:
        - ci/

  - name: agent-operator-git-source
    type: git
    icon: github
    source:
      <<: *instana-operator-git-repo-config
      ignore_paths:
        - ci/

  - name: agent-operator-release-source
    type: git
    icon: github
    source:
      <<: *instana-operator-git-repo-config
      fetch_tags: true
      #  match release tags like "v1.12.99"
      #  match pre-release tags like "v1.12.100-pre"
      tag_regex: '^v\d+\.\d+\.\d+.*$'
      #          ^ beginning of the tag string
      #           ^ all tags start with "v"
      #            ^ ^ any number of digits
      #               ^ the "." character
      #                 ^ ^ any number of digits
      #                    ^ the "." character
      #                      ^ ^ any number of digits
      #                         ^^ any prefix (denoting a non-release tag)
      #                           ^ end of the tag string

  - name: gh-status
    type: cogito
    source:
      owner: instana
      repo: instana-agent-operator
      access_token: ((instanacd-github-api-token))
      context_prefix: concourse
      github_host: github.com

  - name: agent-operator-image-amd64
    type: registry-image
    icon: docker
    source:
      repository: delivery.instana.io/int-docker-agent-local/instana-agent-operator/dev-build
      tag: ((branch))
      username: ((delivery-instana-io-internal-project-artifact-read-writer-creds.username))
      password: ((delivery-instana-io-internal-project-artifact-read-writer-creds.password))
  - name: agent-operator-image-arm64
    type: registry-image
    icon: docker
    source:
      repository: delivery.instana.io/int-docker-agent-local/instana-agent-operator/dev-build
      tag: ((branch))
      username: ((delivery-instana-io-internal-project-artifact-read-writer-creds.username))
      password: ((delivery-instana-io-internal-project-artifact-read-writer-creds.password))
  - name: agent-operator-image-ppc64le
    type: registry-image
    icon: docker
    source:
      repository: delivery.instana.io/int-docker-agent-local/instana-agent-operator/dev-build
      tag: ((branch))
      username: ((delivery-instana-io-internal-project-artifact-read-writer-creds.username))
      password: ((delivery-instana-io-internal-project-artifact-read-writer-creds.password))
  - name: agent-operator-image-s390x
    type: registry-image
    icon: docker
    source:
      repository: delivery.instana.io/int-docker-agent-local/instana-agent-operator/dev-build
      tag: ((branch))
      username: ((delivery-instana-io-internal-project-artifact-read-writer-creds.username))
      password: ((delivery-instana-io-internal-project-artifact-read-writer-creds.password))
  - name: latest-agent-image-manifest
    type: registry-image
    icon: docker
    source:
      repository: icr.io/instana/agent
      tag: latest
      username: iamapikey
      password: ((concourse-icr-containers-public.password))
  - name: agent-operator-image-manifest-sha
    type: key-value
    icon: zip-disk

  - name: preflight
    type: github-release
    source:
      owner: redhat-openshift-ecosystem
      repository: openshift-preflight

jobs:
  - name: self-update
    on_success:
      put: gh-status
      inputs: [ pipeline-source ]
      params: { state: success, context: self-update }
    on_failure:
      put: gh-status
      inputs: [ pipeline-source ]
      params: { state: failure, context: self-update }
    on_error:
      put: gh-status
      inputs: [ pipeline-source ]
      params: { state: error, context: self-update }
    on_abort:
      put: gh-status
      inputs: [ pipeline-source ]
      params: { state: error, context: self-update }
    plan:
      - get: pipeline-source
        trigger: true
      - put: gh-status
        inputs: [ pipeline-source ]
        params: { state: pending, context: self-update }
      - put: gh-status
        inputs: [ pipeline-source ]
        params: { state: pending, context: build/docker }
      - set_pipeline: self
        file: pipeline-source/ci/pipeline.yaml

  - name: tag-release
    max_in_flight: 1
    plan:
      - get: pipeline-source
        trigger: true
        passed: [self-update]
      - get: agent-operator-git-source
        trigger: true
      - task: tag-with-new-semver
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: registry.access.redhat.com/ubi8/ubi-minimal
          inputs:
            - name: agent-operator-git-source
          outputs:
            - name: agent-operator-git-source
          run:
            path: bash
            args:
              - -ceu
              - |
                microdnf install git

                cd agent-operator-git-source
                git pull -r
                latest_release=$(git tag | sort -r --version-sort | head -n1)
                echo "Latest release is ${latest_release}"
                new_release=$(echo $latest_release | awk -F. '/[0-9]+\./{$NF++;print}' OFS=.)

                echo "Tagging repo with the new release tag ${new_release}"
                git config --global user.name "instanacd"
                git config --global user.email "instanacd@instana.com"
                git tag ${new_release}
                echo ${new_release} > ci/version.txt
      - put: agent-operator-git-source
        params:
          repository: agent-operator-git-source
          tag_file: agent-operator-git-source/ci/version.txt
          force: true

  - name: docker-build
    max_in_flight: 1
    on_success:
      put: gh-status
      inputs: [ pipeline-source ]
      params: { state: success, context: build/docker }
    on_failure:
      put: gh-status
      inputs: [ pipeline-source ]
      params: { state: failure, context: build/docker }
    on_error:
      put: gh-status
      inputs: [ pipeline-source ]
      params: { state: error, context: build/docker }
    on_abort:
      put: gh-status
      inputs: [ pipeline-source ]
      params: { state: error, context: build/docker }
    plan:
      - get: pipeline-source
        passed: [self-update]
      - get: agent-operator-release-source
        trigger: true
      - load_var: agent-operator-version
        file: agent-operator-release-source/.git/ref
        reveal: true
      - load_var: git-commit
        file: agent-operator-release-source/.git/HEAD
        reveal: true
      - in_parallel:
          fail_fast: true
          steps:
            - task: build-amd64
              privileged: true
              file: agent-operator-release-source/ci/container-image-build-task.yml
              input_mapping:
                source: agent-operator-release-source
              output_mapping: 
                image: image-amd64
              vars:
                dockerfile: Dockerfile
                target-platform: linux/amd64
                version: ((.:agent-operator-version))
                git-commit: ((.:git-commit))
            - task: build-arm64
              privileged: true
              file: agent-operator-release-source/ci/container-image-build-task.yml
              input_mapping:
                source: agent-operator-release-source
              output_mapping: 
                image: image-arm64
              vars:
                dockerfile: Dockerfile
                target-platform: linux/arm64
                version: ((.:agent-operator-version))
                git-commit: ((.:git-commit))
            - task: build-s390x
              privileged: true
              file: agent-operator-release-source/ci/container-image-build-task.yml
              input_mapping:
                source: agent-operator-release-source
              output_mapping: 
                image: image-s390x
              vars:
                dockerfile: Dockerfile
                target-platform: linux/s390x
                version: ((.:agent-operator-version))
                git-commit: ((.:git-commit))
            - task: build-ppc64le
              privileged: true
              file: agent-operator-release-source/ci/container-image-build-task.yml
              input_mapping:
                source: agent-operator-release-source
              output_mapping: 
                image: image-ppc64le
              vars:
                dockerfile: Dockerfile
                target-platform: linux/ppc64le
                version: ((.:agent-operator-version))
                git-commit: ((.:git-commit))
      - task: create-tag-files
        privileged: true
        file: agent-operator-release-source/ci/create-tag-file.yml
        vars:
          git-commit: ((.:git-commit))
          version: ((.:agent-operator-version))
      - in_parallel:
          fail_fast: true
          steps:
            - put: agent-operator-image-amd64
              params:
                image: image-amd64/image.tar
                additional_tags: image-tags/amd64
            - put: agent-operator-image-arm64
              params:
                image: image-arm64/image.tar
                additional_tags: image-tags/arm64
            - put: agent-operator-image-ppc64le
              params:
                image: image-ppc64le/image.tar
                additional_tags: image-tags/ppc64le
            - put: agent-operator-image-s390x
              params:
                image: image-s390x/image.tar
                additional_tags: image-tags/s390x
      - task: publish-manifest-list
        privileged: true
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: registry.access.redhat.com/ubi8/ubi-minimal
          outputs:
            - name: manifest-list
          params:
            GIT_COMMIT: ((.:git-commit))
            ARTIFACTORY_USERNAME_INTERNAL: ((delivery-instana-io-internal-project-artifact-read-writer-creds.username))
            ARTIFACTORY_PASSWORD_INTERNAL: ((delivery-instana-io-internal-project-artifact-read-writer-creds.password))
          run:
            path: bash
            args:
              - -ceu
              - |
                microdnf install curl gzip tar
                IMAGE_TAG=${GIT_COMMIT}
                OPERATOR_IMAGE_NAME=delivery.instana.io/int-docker-agent-local/instana-agent-operator/dev-build

                # installing manifest-tool
                curl -o manifest-tool.tar.gz -L https://github.com/estesp/manifest-tool/releases/download/v2.1.6/binaries-manifest-tool-2.1.6.tar.gz
                tar -xf manifest-tool.tar.gz
                ./manifest-tool-linux-amd64 \
                  --username ${ARTIFACTORY_USERNAME_INTERNAL} \
                  --password ${ARTIFACTORY_PASSWORD_INTERNAL} \
                  push from-args \
                  --platforms linux/amd64,linux/arm64,linux/ppc64le,linux/s390x \
                  --template ${OPERATOR_IMAGE_NAME}:${IMAGE_TAG}-ARCH \
                  --target ${OPERATOR_IMAGE_NAME}:${IMAGE_TAG} | tee manifest-output.txt

                OPERATOR_IMG_DIGEST=$(awk '{ print $2 }' manifest-output.txt)
                echo "OPERATOR_IMG_DIGEST=$OPERATOR_IMG_DIGEST"
                # folder is created by output defintion
                echo ${OPERATOR_IMG_DIGEST} > manifest-list/digest
      - put: agent-operator-image-manifest-sha
        params:
          directory: manifest-list

  - name: multiarch-operator-manifest-promotion
    max_in_flight: 1
    plan:
      - get: agent-operator-release-source
        trigger: true
        passed: [docker-build]
      - get: agent-operator-image-manifest-sha
        passed: [docker-build]

      - load_var: operator-version
        file: agent-operator-release-source/.git/ref
        #file: agent-operator-release-source/version
        reveal: true
      - load_var: git-commit
        file: agent-operator-release-source/.git/HEAD
        reveal: true
      - task: build-multiarch-manifest
        privileged: true
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: registry.access.redhat.com/ubi8/ubi-minimal
          inputs:
            - name: agent-operator-image-manifest-sha
          params:
            GIT_COMMIT: ((.:git-commit))
            VERSION: ((.:operator-version))
            RED_HAT_REGISTRY_PASSWORD: ((redhat-container-registry-5e961c2c93604e02afa9ebdf.password))
            RED_HAT_REGISTRY_USERNAME: ((redhat-container-registry-5e961c2c93604e02afa9ebdf.user))
            ICR_PASSWORD: ((concourse-icr-containers-public.password))
            ICR_USERNAME: iamapikey
            ARTIFACTORY_USERNAME_INTERNAL: ((delivery-instana-io-internal-project-artifact-read-writer-creds.username))
            ARTIFACTORY_PASSWORD_INTERNAL: ((delivery-instana-io-internal-project-artifact-read-writer-creds.password))
            ARTIFACTORY_USERNAME: ((delivery-instana-io-release-project-artifact-read-writer-creds.username))
            ARTIFACTORY_PASSWORD: ((delivery-instana-io-release-project-artifact-read-writer-creds.password))
            ARTIFACTORY_BASE_URL: ((delivery-artifactory-base-url))
            ARTIFACTORY_CONTAINER_DOCKER_URL: ((delivery-artifactory-docker-agent-release-url))
          run:
            path: bash
            args:
              - -ceu
              - |
                microdnf install skopeo
                DEV_BUILD_IMAGE=delivery.instana.io/int-docker-agent-local/instana-agent-operator/dev-build

                DIGEST=$(cat agent-operator-image-manifest-sha/digest)
                echo ${DIGEST}
                skopeo copy -a --preserve-digests \
                  --src-username ${ARTIFACTORY_USERNAME_INTERNAL} \
                  --src-password ${ARTIFACTORY_PASSWORD_INTERNAL} \
                  --dest-username ${ARTIFACTORY_USERNAME} \
                  --dest-password ${ARTIFACTORY_PASSWORD} \
                  docker://${DEV_BUILD_IMAGE}@${DIGEST} \
                  docker://${DEV_BUILD_IMAGE}:test

                echo "Skipping during test"
                exit 0
                # For non-public releases we are done:
                export RELEASE_REGEX='^v[0-9]+\.[0-9]+\.[0-9]+$'
                if ! [[ $VERSION =~ $RELEASE_REGEX ]]; then
                  echo "---> **** Internal release, publishing to icr.io & Red Hat container registry skipped. ****"
                  exit 0
                fi

                echo "---> **** Public release, publishing to icr.io & Red Hat container registry. ****"

                # strip the leading "v" from the operator version for release:
                export PREFIX="v"
                export OPERATOR_DOCKER_VERSION=${VERSION#"$PREFIX"}

                echo "---> Pushing multi-architectural manifest to icr.io"
                skopeo copy -a --preserve-digests \
                  --src-username ${ARTIFACTORY_USERNAME_INTERNAL} \
                  --src-password ${ARTIFACTORY_PASSWORD_INTERNAL} \
                  --dest-username ${ICR_USERNAME} \
                  --dest-password ${ICR_PASSWORD} \
                  docker://${DEV_BUILD_IMAGE}@${DIGEST} \
                  docker://${ICR_REPOSITORY}:${OPERATOR_DOCKER_VERSION}

                ARTIFACTORY_REPOSITORY="${ARTIFACTORY_CONTAINER_DOCKER_URL}/instana-agent-operator"
                echo "---> Pushing multi-architectural manifest to ${ARTIFACTORY_REPOSITORY}"
                skopeo copy -a --preserve-digests \
                  --src-username ${ARTIFACTORY_USERNAME_INTERNAL} \
                  --src-password ${ARTIFACTORY_PASSWORD_INTERNAL} \
                  --dest-username ${ARTIFACTORY_USERNAME} \
                  --dest-password ${ARTIFACTORY_PASSWORD} \
                  docker://${DEV_BUILD_IMAGE}@${DIGEST} \
                  docker://${ARTIFACTORY_REPOSITORY}:${OPERATOR_DOCKER_VERSION}

                echo "---> pushing images to Red Hat Container Registry"
                export RED_HAT_REGISTRY="quay.io/redhat-isv-containers/5e961c2c93604e02afa9ebdf"
                skopeo copy -a --preserve-digests \
                  --src-username ${ARTIFACTORY_USERNAME_INTERNAL} \
                  --src-password ${ARTIFACTORY_PASSWORD_INTERNAL} \
                  --dest-username ${RED_HAT_REGISTRY_USERNAME} \
                  --dest-password ${RED_HAT_REGISTRY_PASSWORD} \
                  docker://${DEV_BUILD_IMAGE}@${DIGEST} \
                  docker://${RED_HAT_REGISTRY}:${OPERATOR_DOCKER_VERSION}
      - get: preflight
        params:
          globs:
            - preflight-linux-amd64
      - try:
          task: redhat-preflight-scans
          config:
            platform: linux
            image_resource:
              type: registry-image
              source:
                repository: registry.access.redhat.com/ubi8/ubi-minimal
            inputs:
              - name: preflight
            params:
              VERSION: ((.:operator-version))
              RED_HAT_API_TOKEN: ((redhat-container-registry-5e9612d87512796c24e4aeef.api-token))
              RED_HAT_REGISTRY_PASSWORD: ((redhat-container-registry-5e961c2c93604e02afa9ebdf.password))
              RED_HAT_REGISTRY_USERNAME: ((redhat-container-registry-5e961c2c93604e02afa9ebdf.user))
            run:
              path: bash
              args:
                - -ce
                - |
                  microdnf install skopeo
                  # strip the leading "v" from the operator version for release:

                  export PREFIX="v"
                  export OPERATOR_DOCKER_VERSION=${VERSION#"$PREFIX"}

                  # Run Preflight Image Scans for RH Marketplace

                  export RED_HAT_PROJECT_ID=5e961c2c93604e02afa9ebdf
                  export RED_HAT_REGISTRY="quay.io/redhat-isv-containers/${RED_HAT_PROJECT_ID}"
                  skopeo login -u ${RED_HAT_REGISTRY_USERNAME} -p ${RED_HAT_REGISTRY_PASSWORD} --authfile $(pwd)/auth.json quay.io
                  export DOCKER_CFG_FILE="$(pwd)/auth.json"

                  pushd preflight

                  chmod +x preflight-linux-amd64

                  ./preflight-linux-amd64 check container --artifacts amd64 "$RED_HAT_REGISTRY:$OPERATOR_DOCKER_VERSION-amd64" --certification-project-id=$RED_HAT_PROJECT_ID --docker-config $DOCKER_CFG_FILE --submit --pyxis-api-token=$RED_HAT_API_TOKEN
                  ./preflight-linux-amd64 check container --artifacts s390x "$RED_HAT_REGISTRY:$OPERATOR_DOCKER_VERSION-s390x" --certification-project-id=$RED_HAT_PROJECT_ID --docker-config $DOCKER_CFG_FILE --submit --pyxis-api-token=$RED_HAT_API_TOKEN
                  ./preflight-linux-amd64 check container --artifacts ppc64le "$RED_HAT_REGISTRY:$OPERATOR_DOCKER_VERSION-ppc64le" --certification-project-id=$RED_HAT_PROJECT_ID --docker-config $DOCKER_CFG_FILE --submit --pyxis-api-token=$RED_HAT_API_TOKEN

                  popd

  - name: operator-olm-github-release
    max_in_flight: 1
    plan:
      - get: agent-operator-release-source
        trigger: true
        passed: [multiarch-operator-manifest-promotion]
      - get: agent-operator-image-manifest-sha
        passed: [multiarch-operator-manifest-promotion]
      - get: latest-agent-image-manifest
        params: { skip_download: true }
      - load_var: operator-version
        file: agent-operator-release-source/.git/ref
        #file: agent-operator-release-source/version
        reveal: true
      - load_var: agent-image-digest
        file: latest-agent-image-manifest/digest
        reveal: true
      - task: build
        privileged: true
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: registry.access.redhat.com/ubi8/ubi-minimal
          inputs:
            - name: agent-operator-release-source
            - name: agent-operator-image-manifest-sha
          outputs:
            - name: build
          params:
            VERSION: ((.:operator-version))
            AGENT_IMG_DIGEST: ((.:agent-image-digest))
            GH_API_TOKEN: ((instanacd-github-api-token))
          run:
            path: bash
            args:
              - -ceu
              - |
                microdnf install make python3-devel gcc git tar gzip zip curl jq
                pip3 install pyyaml

                # ubi8 still bundles Go 1.15 but we rely on 1.21, so install manually
                export PATH="$PATH:/usr/local/go/bin"
                export GOPATH=/go
                export GO_VERSION=1.22.3
                export GO_SHA256="8920ea521bad8f6b7bc377b4824982e011c19af27df88a815e3586ea895f1b36 go${GO_VERSION}.linux-amd64.tar.gz"

                curl -L --fail --show-error --silent "https://golang.org/dl/go${GO_VERSION}.linux-amd64.tar.gz" -o "go${GO_VERSION}.linux-amd64.tar.gz" \
                && echo "${GO_SHA256}" | sha256sum --check \
                && rm -rf /usr/local/go \
                && tar -C /usr/local -xzf "go${GO_VERSION}.linux-amd64.tar.gz" \
                && mkdir -p "${GOPATH}" \
                && go version

                if [[ -f "agent-operator-image-manifest-sha/digest" ]]; then
                  export OPERATOR_IMAGE_MANIFEST_SHA=$(cat "agent-operator-image-manifest-sha/digest")
                  echo "Found SHA for latest Operator Manifest: ${OPERATOR_IMAGE_MANIFEST_SHA}"
                else
                  echo "No SHA found for latest Operator Manifest. Might be pre-release version"
                  ls -la agent-operator-image-manifest-sha/
                  exit 1
                fi

                pushd agent-operator-release-source

                # Create a place to store our output for packaging up
                mkdir -p target

                # strip the leading "v" from the operator version for github artefacts and release:
                export PREFIX="v"
                export OLM_RELEASE_VERSION=${VERSION#"$PREFIX"}

                # Get currently published version of the OLM bundle in the community operators project, so we can correctly set the 'replaces' field
                # Uses jq to filter out non-release versions
                export PREV_VERSION=$(curl --silent --fail --show-error -L https://api.github.com/repos/instana/instana-agent-operator/tags \
                 | jq 'map(select(.name | test("^v[0-9]+.[0-9]+.[0-9]+$"))) | .[1].name' \
                 | sed 's/[^0-9]*\([0-9]\+\.[0-9]\+\.[0-9]\+\).*/\1/')

                if [[ "x${PREV_VERSION}" = "x" ]]; then
                  echo "!! Could not determine previous released version. Fix either pipeline or tag history !!"
                  exit 1
                fi

                if [[ "x${OPERATOR_IMAGE_MANIFEST_SHA}" = "x" ]]; then
                  echo "No Operator manifest SHA found, using version ${OLM_RELEASE_VERSION} for Operator image"
                  export OPERATOR_IMAGE=" icr.io/instana/instana-agent-operator:${OLM_RELEASE_VERSION}"
                else
                  echo "Operator manifest SHA found, using digest ${OPERATOR_IMAGE_MANIFEST_SHA} for Operator image"
                  export OPERATOR_IMAGE=" icr.io/instana/instana-agent-operator@${OPERATOR_IMAGE_MANIFEST_SHA}"
                fi

                # Create bundle for public operator with image:  icr.io/instana/instana-agent-operator:<version>
                make IMG="${OPERATOR_IMAGE}" \
                  VERSION="${OLM_RELEASE_VERSION}" \
                  PREV_VERSION="${PREV_VERSION}" \
                  AGENT_IMG="icr.io/instana/agent@${AGENT_IMG_DIGEST}" \
                  bundle

                pushd bundle
                zip -r ../target/olm-${OLM_RELEASE_VERSION}.zip .
                popd

                # Create the YAML for installing the Agent Operator, which we want to package with the release
                make --silent IMG=" icr.io/instana/instana-agent-operator:${OLM_RELEASE_VERSION}" controller-yaml > target/instana-agent-operator.yaml

                # For public releases, also create the appropriate github release:
                export RELEASE_REGEX='^v[0-9]+\.[0-9]+\.[0-9]+$'
                if ! [[ $VERSION =~ $RELEASE_REGEX ]]; then
                  echo "---> **** Internal release, GitHub release creation skipped. ****"
                  exit 0
                fi

                echo "**** Public release, create github.com release $VERSION. ****"
                ./ci/create-github-release.sh $OLM_RELEASE_VERSION $GH_API_TOKEN
