---
resource_types:
  - name: google-cloud-storage
    type: docker-image
    source:
      repository: frodenas/gcs-resource
  - name: codebuild
    type: registry-image
    source:
      repository: cedricziel/concourse-codebuild-resource
      tag: "0.1.14"
  - name: key-value
    type: registry-image
    source:
      repository: gstack/keyval-resource
  - name: git
    type: docker-image
    source:
      repository: concourse/git-resource
      tag: "1.14.5"

resources:
  - name: agent-operator-pipeline-source
    type: git
    icon: github
    source:
      uri: https://github.com/instana/instana-agent-operator.git
      branch: main

  - name: agent-operator-release-source
    type: git
    icon: github
    source:
      uri: https://github.com/instana/instana-agent-operator.git
      fetch_tags: true
      branch: main
      #  match release tags like "v1.12.99"
      #  match pre-release tags like "v1.12.100-pre"
      tag_regex: '^v\d+\.\d+\.\d+.*$'
      #          ^ beginning of the tag string
      #           ^ all tags start with "v"
      #            ^ ^ any number of digits
      #               ^ the "." character
      #                 ^ ^ any number of digits
      #                    ^ the "." character
      #                      ^ ^ any number of digits
      #                         ^^ any prefix (denoting a non-release tag)
      #                           ^ end of the tag string

  - name: build-bundle
    type: s3
    icon: zip-disk
    source:
      bucket: instana-agent-operator-codebuild
      versioned_file: context.zip
      access_key_id: ((codebuild-key.key_id))
      secret_access_key: ((codebuild-key.key_secret))
      region_name: us-west-2
      skip_download: true

  - name: codebuild-amd64
    type: codebuild
    icon: aws
    source:
      project: instana-agent-operator-codebuild
      region: us-west-2
      access_key_id: ((codebuild-key.key_id))
      secret_access_key: ((codebuild-key.key_secret))
  - name: codebuild-arm64
    type: codebuild
    icon: aws
    source:
      project: instana-agent-operator-codebuild
      region: us-west-2
      access_key_id: ((codebuild-key.key_id))
      secret_access_key: ((codebuild-key.key_secret))
  - name: codebuild-s390x
    type: codebuild
    icon: aws
    source:
      project: instana-agent-operator-codebuild
      region: us-west-2
      access_key_id: ((codebuild-key.key_id))
      secret_access_key: ((codebuild-key.key_secret))
  - name: codebuild-ppc64le
    type: codebuild
    icon: aws
    source:
      project: instana-agent-operator-codebuild
      region: us-west-2
      access_key_id: ((codebuild-key.key_id))
      secret_access_key: ((codebuild-key.key_secret))

  - name: operator-image-amd64
    type: registry-image
    icon: docker
    source:
      repository: gcr.io/instana-agent-qa/instana-agent-operator
      tag: latest-amd64
      username: _json_key
      password: ((project-berlin-tests-gcp-instana-qa))
  - name: operator-image-arm64
    type: registry-image
    icon: docker
    source:
      repository: gcr.io/instana-agent-qa/instana-agent-operator
      tag: latest-arm64
      username: _json_key
      password: ((project-berlin-tests-gcp-instana-qa))
  - name: operator-image-s390x
    type: registry-image
    icon: docker
    source:
      repository: gcr.io/instana-agent-qa/instana-agent-operator
      tag: latest-s390x
      username: _json_key
      password: ((project-berlin-tests-gcp-instana-qa))
  - name: operator-image-ppc64le
    type: registry-image
    icon: docker
    source:
      repository: gcr.io/instana-agent-qa/instana-agent-operator
      tag: latest-ppc64le
      username: _json_key
      password: ((project-berlin-tests-gcp-instana-qa))

  - name: latest-operator-image-manifest-sha
    type: key-value
    icon: zip-disk

  - name: latest-agent-image-manifest
    type: registry-image
    icon: docker
    source:
      repository: icr.io/instana/agent
      tag: latest
      username: iamapikey
      password: ((concourse-icr-containers-public.password))
  - name: preflight
    type: github-release
    source:
      owner: redhat-openshift-ecosystem
      repository: openshift-preflight

jobs:
  - name: self-update
    plan:
    - get: agent-operator-pipeline-source
      trigger: true
    - set_pipeline: self
      file: agent-operator-pipeline-source/ci/pipeline.yaml

  - name: prepare-build-bundle
    max_in_flight: 1
    plan:
      - get: agent-operator-release-source
        trigger: true
      - task: package-build-bundle
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: ubuntu
              tag: focal
          inputs:
            - name: agent-operator-release-source
              path: .
          run:
            path: bash
            args:
              - -ce
              - |
                date
                apt update
                apt install -yqq zip unzip tar
                zip -r target/context.zip .
          outputs:
            - name: target
      - put: build-bundle
        params:
          file: target/context.zip

  - name: multiarch-operator-images-build
    max_in_flight: 1
    plan:
      - get: build-bundle
        trigger: true
        passed: [ prepare-build-bundle ]
      - get: agent-operator-release-source
        passed: [ prepare-build-bundle ]
      - load_var: s3-artifact-version
        file: build-bundle/version
        reveal: true
      - load_var: operator-version
        file: agent-operator-release-source/.git/ref
        #file: agent-operator-release-source/version
        reveal: true
      - load_var: commit-sha
        file: agent-operator-release-source/.git/HEAD
        reveal: true

      # spin off AWS CloudBuild jobs to build operator
      # images for the different target platforms:
      - in_parallel:
          fail_fast: true
          steps:
            - put: codebuild-amd64
              params:
                source_version: ((.:s3-artifact-version))
                env_var_overrides:
                  DOCKER_HUB_USERNAME: ((dockerhub-instanacicd.user))
                  DOCKER_HUB_PASSWORD: ((dockerhub-instanacicd.password))
                  ARCH: amd64
                  VERSION: ((.:operator-version))
                  COMMIT_SHA: ((.:commit-sha))
                  TARGETPLATFORM: linux/amd64
            - put: codebuild-arm64
              params:
                source_version: ((.:s3-artifact-version))
                env_var_overrides:
                  DOCKER_HUB_USERNAME: ((dockerhub-instanacicd.user))
                  DOCKER_HUB_PASSWORD: ((dockerhub-instanacicd.password))
                  ARCH: arm64
                  VERSION: ((.:operator-version))
                  COMMIT_SHA: ((.:commit-sha))
                  TARGETPLATFORM: linux/arm64
            - put: codebuild-s390x
              params:
                source_version: ((.:s3-artifact-version))
                env_var_overrides:
                  DOCKER_HUB_USERNAME: ((dockerhub-instanacicd.user))
                  DOCKER_HUB_PASSWORD: ((dockerhub-instanacicd.password))
                  ARCH: s390x
                  VERSION: ((.:operator-version))
                  COMMIT_SHA: ((.:commit-sha))
                  TARGETPLATFORM: linux/s390x
            - put: codebuild-ppc64le
              params:
                source_version: ((.:s3-artifact-version))
                env_var_overrides:
                  DOCKER_HUB_USERNAME: ((dockerhub-instanacicd.user))
                  DOCKER_HUB_PASSWORD: ((dockerhub-instanacicd.password))
                  ARCH: ppc64le
                  VERSION: ((.:operator-version))
                  COMMIT_SHA: ((.:commit-sha))
                  TARGETPLATFORM: linux/ppc64le
      # upload the AWS CloudBuild built images to GCR:
      - in_parallel:
          fail_fast: true
          steps:
            - put: operator-image-amd64
              params:
                  image: codebuild-amd64/artifacts/image.tar
                  additional_tags: codebuild-amd64/artifacts/tag
            - put: operator-image-arm64
              params:
                  image: codebuild-arm64/artifacts/image.tar
                  additional_tags: codebuild-arm64/artifacts/tag
            - put: operator-image-s390x
              params:
                  image: codebuild-s390x/artifacts/image.tar
                  additional_tags: codebuild-s390x/artifacts/tag
            - put: operator-image-ppc64le
              params:
                  image: codebuild-ppc64le/artifacts/image.tar
                  additional_tags: codebuild-ppc64le/artifacts/tag

  - name: multiarch-operator-manifest-publish
    max_in_flight: 1
    plan:
      - get: agent-operator-release-source
        trigger: true
        passed: [ multiarch-operator-images-build ]
      - get: operator-image-amd64
        params: { skip_download: true }
        passed: [ multiarch-operator-images-build ]
      - get: operator-image-arm64
        params: { skip_download: true }
        passed: [ multiarch-operator-images-build ]
      - get: operator-image-s390x
        params: { skip_download: true }
        passed: [ multiarch-operator-images-build ]
      - get: operator-image-ppc64le
        params: { skip_download: true }
        passed: [ multiarch-operator-images-build ]

      - load_var: operator-version
        file: agent-operator-release-source/.git/ref
        #file: agent-operator-release-source/version
        reveal: true
      - load_var: commit-sha
        file: agent-operator-release-source/.git/HEAD
        reveal: true
      - task: build-multiarch-manifest
        privileged: true
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: karlkfi/concourse-dcind
          inputs:
            - name: agent-operator-release-source
          outputs:
            - name: message
            - name: latest-operator-image-manifest-sha
            - name: docker-cfg
          params:
            DOCKER_CLI_EXPERIMENTAL: enabled
            COMMIT_SHA: ((.:commit-sha))
            VERSION: ((.:operator-version))
            JSON_KEY: ((project-berlin-tests-gcp-instana-qa))
            RED_HAT_REGISTRY_PASSWORD: ((redhat-container-registry-5e961c2c93604e02afa9ebdf.password))
            RED_HAT_REGISTRY_USERNAME: ((redhat-container-registry-5e961c2c93604e02afa9ebdf.user))
            ICR_PASSWORD: ((concourse-icr-containers-public.password))
            ICR_USERNAME: iamapikey
            ARTIFACTORY_USERNAME: ((delivery-instana-io-release-project-artifact-read-writer-creds.username))
            ARTIFACTORY_PASSWORD: ((delivery-instana-io-release-project-artifact-read-writer-creds.password))
            ARTIFACTORY_BASE_URL: ((delivery-artifactory-base-url))
            ARTIFACTORY_CONTAINER_DOCKER_URL: ((delivery-artifactory-docker-agent-release-url))
          run:
            path: entrypoint.sh
            args:
              - bash
              - -ceu
              - |
                set -e
                echo $JSON_KEY > key.json
                cat key.json | docker login -u _json_key --password-stdin https://gcr.io
                echo "((containers-instana-io-creds.password))" | docker login -u ((containers-instana-io-creds.username)) --password-stdin https://containers.instana.io

                echo "---> Pulling source containers"
                docker pull "gcr.io/instana-agent-qa/instana-agent-operator:$COMMIT_SHA-$VERSION-amd64"
                docker pull "gcr.io/instana-agent-qa/instana-agent-operator:$COMMIT_SHA-$VERSION-s390x"
                docker pull "gcr.io/instana-agent-qa/instana-agent-operator:$COMMIT_SHA-$VERSION-arm64"
                docker pull "gcr.io/instana-agent-qa/instana-agent-operator:$COMMIT_SHA-$VERSION-ppc64le"

                echo "---> Building multi-architectural manifest"
                docker manifest create "gcr.io/instana-agent-qa/instana-agent-operator:$COMMIT_SHA-$VERSION" \
                  --amend "gcr.io/instana-agent-qa/instana-agent-operator:$COMMIT_SHA-$VERSION-amd64" \
                  --amend "gcr.io/instana-agent-qa/instana-agent-operator:$COMMIT_SHA-$VERSION-s390x" \
                  --amend "gcr.io/instana-agent-qa/instana-agent-operator:$COMMIT_SHA-$VERSION-arm64" \
                  --amend "gcr.io/instana-agent-qa/instana-agent-operator:$COMMIT_SHA-$VERSION-ppc64le"

                echo "---> Pushing multi-architectural manifest"
                docker manifest push "gcr.io/instana-agent-qa/instana-agent-operator:$COMMIT_SHA-$VERSION"

                # For non-public releases we are done:
                export RELEASE_REGEX='^v[0-9]+\.[0-9]+\.[0-9]+$'
                if ! [[ $VERSION =~ $RELEASE_REGEX ]]; then
                  echo "---> **** Internal release, publishing to icr.io & Red Hat container registry skipped. ****"
                  exit 0
                fi

                echo "---> **** Public release, publishing to icr.io & Red Hat container registry. ****"

                # strip the leading "v" from the operator version for release:
                export PREFIX="v"
                export OPERATOR_DOCKER_VERSION=${VERSION#"$PREFIX"}

                echo "---> re-tagging images for icr.io"
                echo "$ICR_PASSWORD" | docker login -u $ICR_USERNAME --password-stdin icr.io
                ICR_REPOSITORY="icr.io/instana/instana-agent-operator"
                docker tag "gcr.io/instana-agent-qa/instana-agent-operator:$COMMIT_SHA-$VERSION-amd64" "$ICR_REPOSITORY:$OPERATOR_DOCKER_VERSION-amd64"
                docker tag "gcr.io/instana-agent-qa/instana-agent-operator:$COMMIT_SHA-$VERSION-s390x" "$ICR_REPOSITORY:$OPERATOR_DOCKER_VERSION-s390x"
                docker tag "gcr.io/instana-agent-qa/instana-agent-operator:$COMMIT_SHA-$VERSION-arm64" "$ICR_REPOSITORY:$OPERATOR_DOCKER_VERSION-arm64"
                docker tag "gcr.io/instana-agent-qa/instana-agent-operator:$COMMIT_SHA-$VERSION-ppc64le" "$ICR_REPOSITORY:$OPERATOR_DOCKER_VERSION-ppc64le"

                echo "---> pushing images to icr.io"
                docker push "$ICR_REPOSITORY:$OPERATOR_DOCKER_VERSION-amd64"
                docker push "$ICR_REPOSITORY:$OPERATOR_DOCKER_VERSION-s390x"
                docker push "$ICR_REPOSITORY:$OPERATOR_DOCKER_VERSION-arm64"
                docker push "$ICR_REPOSITORY:$OPERATOR_DOCKER_VERSION-ppc64le"

                echo "---> Building multi-architectural manifest on icr.io"
                docker manifest create "$ICR_REPOSITORY:$OPERATOR_DOCKER_VERSION" \
                  --amend "$ICR_REPOSITORY:$OPERATOR_DOCKER_VERSION-amd64" \
                  --amend "$ICR_REPOSITORY:$OPERATOR_DOCKER_VERSION-s390x" \
                  --amend "$ICR_REPOSITORY:$OPERATOR_DOCKER_VERSION-arm64" \
                  --amend "$ICR_REPOSITORY:$OPERATOR_DOCKER_VERSION-ppc64le"

                echo "---> Pushing multi-architectural manifest to icr.io"
                docker manifest push --purge "$ICR_REPOSITORY:$OPERATOR_DOCKER_VERSION" | tee "latest-operator-image-manifest-sha/sha-${VERSION}"
                
                # Validate the SHA to be sure we captured something
                if ! [[ $(cat "latest-operator-image-manifest-sha/sha-${VERSION}") =~ ^sha256:[0-9a-zA-Z]+$ ]]; then
                  echo "---> Did not manage to capture a valid digest for the manifest, aborting; $(cat "latest-operator-image-manifest-sha/sha-${VERSION}")"
                  exit 1
                fi
                
                echo "$ARTIFACTORY_PASSWORD" | docker login -u $ARTIFACTORY_USERNAME --password-stdin ${ARTIFACTORY_BASE_URL}
                ARTIFACTORY_REPOSITORY="${ARTIFACTORY_CONTAINER_DOCKER_URL}/instana-agent-operator"
                
                export artifactory_exists=0
                docker manifest inspect $ARTIFACTORY_REPOSITORY:${OPERATOR_DOCKER_VERSION} || export artifactory_exists=$?
                if [ $artifactory_exists -eq 0 ]; then
                  echo "Manifest $ARTIFACTORY_REPOSITORY:${OPERATOR_DOCKER_VERSION} is already present on Artifactory, skipping publish."
                else
                  echo "---> re-tagging images for artifactory"
                  docker tag "gcr.io/instana-agent-qa/instana-agent-operator:$COMMIT_SHA-$VERSION-amd64" "$ARTIFACTORY_REPOSITORY:$OPERATOR_DOCKER_VERSION-amd64"
                  docker tag "gcr.io/instana-agent-qa/instana-agent-operator:$COMMIT_SHA-$VERSION-s390x" "$ARTIFACTORY_REPOSITORY:$OPERATOR_DOCKER_VERSION-s390x"
                  docker tag "gcr.io/instana-agent-qa/instana-agent-operator:$COMMIT_SHA-$VERSION-arm64" "$ARTIFACTORY_REPOSITORY:$OPERATOR_DOCKER_VERSION-arm64"
                  docker tag "gcr.io/instana-agent-qa/instana-agent-operator:$COMMIT_SHA-$VERSION-ppc64le" "$ARTIFACTORY_REPOSITORY:$OPERATOR_DOCKER_VERSION-ppc64le"
  
                  echo "---> pushing images to artifactory"
                  docker push "$ARTIFACTORY_REPOSITORY:$OPERATOR_DOCKER_VERSION-amd64"
                  docker push "$ARTIFACTORY_REPOSITORY:$OPERATOR_DOCKER_VERSION-s390x"
                  docker push "$ARTIFACTORY_REPOSITORY:$OPERATOR_DOCKER_VERSION-arm64"
                  docker push "$ARTIFACTORY_REPOSITORY:$OPERATOR_DOCKER_VERSION-ppc64le"
  
                  echo "---> Building multi-architectural manifest on artifactory"
                  docker manifest create "$ARTIFACTORY_REPOSITORY:$OPERATOR_DOCKER_VERSION" \
                    --amend "$ARTIFACTORY_REPOSITORY:$OPERATOR_DOCKER_VERSION-amd64" \
                    --amend "$ARTIFACTORY_REPOSITORY:$OPERATOR_DOCKER_VERSION-s390x" \
                    --amend "$ARTIFACTORY_REPOSITORY:$OPERATOR_DOCKER_VERSION-arm64" \
                    --amend "$ARTIFACTORY_REPOSITORY:$OPERATOR_DOCKER_VERSION-ppc64le"
  
                  echo "---> Pushing multi-architectural manifest to artifactory"
                  docker manifest push --purge "$ARTIFACTORY_REPOSITORY:$OPERATOR_DOCKER_VERSION" | tee "latest-operator-image-manifest-sha/sha-${VERSION}"
                fi

                echo $RED_HAT_REGISTRY_PASSWORD | docker login -u $RED_HAT_REGISTRY_USERNAME --password-stdin quay.io
                export RED_HAT_REGISTRY="quay.io/redhat-isv-containers/5e961c2c93604e02afa9ebdf"
                
                # Copy Docker CFG for Preflight Step
                cp ~/.docker/config.json docker-cfg/

                export EXISTS=0
                docker manifest inspect $RED_HAT_REGISTRY:${OPERATOR_DOCKER_VERSION} || export EXISTS=$?
                if [ $EXISTS -eq 0 ]
                then
                  echo "Manifest $RED_HAT_REGISTRY:${OPERATOR_DOCKER_VERSION} is already present on Red Hat Container Registry, skipping publish."
                  exit 0
                fi

                echo "---> re-tagging images for Red Hat Container Registry"
                docker tag "gcr.io/instana-agent-qa/instana-agent-operator:$COMMIT_SHA-$VERSION-amd64" "$RED_HAT_REGISTRY:$OPERATOR_DOCKER_VERSION-amd64"
                docker tag "gcr.io/instana-agent-qa/instana-agent-operator:$COMMIT_SHA-$VERSION-s390x" "$RED_HAT_REGISTRY:$OPERATOR_DOCKER_VERSION-s390x"
                #docker tag "gcr.io/instana-agent-qa/instana-agent-operator:$COMMIT_SHA-$VERSION-arm64" "$RED_HAT_REGISTRY:$OPERATOR_DOCKER_VERSION-arm64" # arm scans not available
                docker tag "gcr.io/instana-agent-qa/instana-agent-operator:$COMMIT_SHA-$VERSION-ppc64le" "$RED_HAT_REGISTRY:$OPERATOR_DOCKER_VERSION-ppc64le"

                echo "---> pushing images to Red Hat Container Registry"
                docker push "$RED_HAT_REGISTRY:$OPERATOR_DOCKER_VERSION-amd64"
                docker push "$RED_HAT_REGISTRY:$OPERATOR_DOCKER_VERSION-s390x"
                #docker push "$RED_HAT_REGISTRY:$OPERATOR_DOCKER_VERSION-arm64" # arm scans not available
                docker push "$RED_HAT_REGISTRY:$OPERATOR_DOCKER_VERSION-ppc64le"

                # According to this knowledge base article https://access.redhat.com/solutions/5583611 the RH container registry does not support fat manifest lists.
                # For now we will fall back to just publish the amd64 variant instead:
                docker tag "gcr.io/instana-agent-qa/instana-agent-operator:$COMMIT_SHA-$VERSION-amd64" "$RED_HAT_REGISTRY:$OPERATOR_DOCKER_VERSION"
                docker push "$RED_HAT_REGISTRY:$OPERATOR_DOCKER_VERSION"
                # echo "---> Building multi-architectural manifest on Red Hat Container Registry"
                # docker manifest create "$RED_HAT_REGISTRY:$OPERATOR_DOCKER_VERSION" \
                #  --amend "$RED_HAT_REGISTRY:$OPERATOR_DOCKER_VERSION-amd64" \
                #  --amend "$RED_HAT_REGISTRY:$OPERATOR_DOCKER_VERSION-s390x" \
                #  --amend "$RED_HAT_REGISTRY:$OPERATOR_DOCKER_VERSION-arm64" \
                #  --amend "$RED_HAT_REGISTRY:$OPERATOR_DOCKER_VERSION-ppc64le"

                # echo "---> Pushing multi-architectural manifest to Red Hat Container Registry"
                # docker manifest push --purge "$RED_HAT_REGISTRY:$OPERATOR_DOCKER_VERSION"
      - put: latest-operator-image-manifest-sha
        params:
          directory: latest-operator-image-manifest-sha
      - get: preflight
        params:
          globs:
            - preflight-linux-amd64
      - try:
          task: redhat-preflight-scans
          config:
            platform: linux
            image_resource:
              type: registry-image
              source:
                repository: registry.access.redhat.com/ubi8/ubi-minimal
            inputs:
              - name: docker-cfg
              - name: preflight
            params:
              VERSION: ((.:operator-version))
              RED_HAT_API_TOKEN: ((redhat-container-registry-5e9612d87512796c24e4aeef.api-token))
            run:
              path: bash
              args:
                - -ce
                - |
                  # strip the leading "v" from the operator version for release:
                  
                  export PREFIX="v"
                  export OPERATOR_DOCKER_VERSION=${VERSION#"$PREFIX"}
                  
                  # Run Preflight Image Scans for RH Marketplace
                  
                  export RED_HAT_PROJECT_ID=5e961c2c93604e02afa9ebdf
                  export RED_HAT_REGISTRY="quay.io/redhat-isv-containers/${RED_HAT_PROJECT_ID}"
                  export DOCKER_CFG_FILE="$(pwd)/docker-cfg/config.json"
                  
                  pushd preflight
                  
                  chmod +x preflight-linux-amd64
                  
                  ./preflight-linux-amd64 check container --artifacts amd64 "$RED_HAT_REGISTRY:$OPERATOR_DOCKER_VERSION-amd64" --certification-project-id=$RED_HAT_PROJECT_ID --docker-config $DOCKER_CFG_FILE --submit --pyxis-api-token=$RED_HAT_API_TOKEN
                  ./preflight-linux-amd64 check container --artifacts s390x "$RED_HAT_REGISTRY:$OPERATOR_DOCKER_VERSION-s390x" --certification-project-id=$RED_HAT_PROJECT_ID --docker-config $DOCKER_CFG_FILE --submit --pyxis-api-token=$RED_HAT_API_TOKEN
                  ./preflight-linux-amd64 check container --artifacts ppc64le "$RED_HAT_REGISTRY:$OPERATOR_DOCKER_VERSION-ppc64le" --certification-project-id=$RED_HAT_PROJECT_ID --docker-config $DOCKER_CFG_FILE --submit --pyxis-api-token=$RED_HAT_API_TOKEN
                  
                  popd

  - name: operator-olm-github-release
    max_in_flight: 1
    plan:
      - get: agent-operator-release-source
        trigger: true
        passed: [ multiarch-operator-manifest-publish ]
      - get: latest-operator-image-manifest-sha
        passed: [ multiarch-operator-manifest-publish ]
      - get: latest-agent-image-manifest
        params: { skip_download: true }
      - load_var: operator-version
        file: agent-operator-release-source/.git/ref
        #file: agent-operator-release-source/version
        reveal: true
      - load_var: agent-image-digest
        file: latest-agent-image-manifest/digest
        reveal: true
      - task: build
        privileged: true
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: registry.access.redhat.com/ubi8/ubi-minimal
          inputs:
            - name: agent-operator-release-source
            - name: latest-operator-image-manifest-sha
          outputs:
            - name: build
          params:
            VERSION: ((.:operator-version))
            AGENT_IMG_DIGEST: ((.:agent-image-digest))
            GH_API_TOKEN: ((instanacd-github-api-token))
          run:
            path: bash
            args:
              - -ceu
              - |
                microdnf install make python3-devel gcc git tar gzip zip curl jq
                pip3 install pyyaml

                # ubi8 still bundles Go 1.15 but we rely on 1.18, so install manually
                export PATH="$PATH:/usr/local/go/bin"
                export GOPATH=/go
                export GO_VERSION=1.18.5
                export GO_SHA256="9e5de37f9c49942c601b191ac5fba404b868bfc21d446d6960acc12283d6e5f2 go${GO_VERSION}.linux-amd64.tar.gz"

                curl -L --fail --show-error --silent "https://golang.org/dl/go${GO_VERSION}.linux-amd64.tar.gz" -o "go${GO_VERSION}.linux-amd64.tar.gz" \
                && echo "${GO_SHA256}" | sha256sum --check \
                && rm -rf /usr/local/go \
                && tar -C /usr/local -xzf "go${GO_VERSION}.linux-amd64.tar.gz" \
                && mkdir -p "${GOPATH}" \
                && go version

                if [[ -f "latest-operator-image-manifest-sha/sha-${VERSION}" ]]; then
                  export OPERATOR_IMAGE_MANIFEST_SHA=$(cat "latest-operator-image-manifest-sha/sha-${VERSION}")
                  echo "Found SHA for latest Operator Manifest: ${OPERATOR_IMAGE_MANIFEST_SHA}"
                else
                  echo "No SHA found for latest Operator Manifest. Might be pre-release version"
                  ls -la latest-operator-image-manifest-sha/
                  exit 1
                fi

                pushd agent-operator-release-source

                # Create a place to store our output for packaging up
                mkdir -p target

                # strip the leading "v" from the operator version for github artefacts and release:
                export PREFIX="v"
                export OLM_RELEASE_VERSION=${VERSION#"$PREFIX"}

                # Get currently published version of the OLM bundle in the community operators project, so we can correctly set the 'replaces' field
                # Uses jq to filter out non-release versions
                export PREV_VERSION=$(curl --silent --fail --show-error -L https://api.github.com/repos/instana/instana-agent-operator/tags \
                 | jq 'map(select(.name | test("^v[0-9]+.[0-9]+.[0-9]+$"))) | .[1].name' \
                 | sed 's/[^0-9]*\([0-9]\+\.[0-9]\+\.[0-9]\+\).*/\1/')

                if [[ "x${PREV_VERSION}" = "x" ]]; then
                  echo "!! Could not determine previous released version. Fix either pipeline or tag history !!"
                  exit 1
                fi

                if [[ "x${OPERATOR_IMAGE_MANIFEST_SHA}" = "x" ]]; then
                  echo "No Operator manifest SHA found, using version ${OLM_RELEASE_VERSION} for Operator image"
                  export OPERATOR_IMAGE=" icr.io/instana/instana-agent-operator:${OLM_RELEASE_VERSION}"
                else
                  echo "Operator manifest SHA found, using digest ${OPERATOR_IMAGE_MANIFEST_SHA} for Operator image"
                  export OPERATOR_IMAGE=" icr.io/instana/instana-agent-operator@${OPERATOR_IMAGE_MANIFEST_SHA}"
                fi

                # Create bundle for public operator with image:  icr.io/instana/instana-agent-operator:<version>
                make IMG="${OPERATOR_IMAGE}" \
                  VERSION="${OLM_RELEASE_VERSION}" \
                  PREV_VERSION="${PREV_VERSION}" \
                  AGENT_IMG="icr.io/instana/agent@${AGENT_IMG_DIGEST}" \
                  bundle

                pushd bundle
                zip -r ../target/olm-${OLM_RELEASE_VERSION}.zip .
                popd

                # Create the YAML for installing the Agent Operator, which we want to package with the release
                make --silent IMG=" icr.io/instana/instana-agent-operator:${OLM_RELEASE_VERSION}" controller-yaml > target/instana-agent-operator.yaml
                # Create the YAML for installing the Agent Operator, which we want to package with the release (WITHOUT WEBHOOK)
                make --silent IMG=" icr.io/instana/instana-agent-operator:${OLM_RELEASE_VERSION}" controller-yaml-no-webhook > target/instana-agent-operator-no-conversion-webhook.yaml

                # For public releases, also create the appropriate github release:
                export RELEASE_REGEX='^v[0-9]+\.[0-9]+\.[0-9]+$'
                if ! [[ $VERSION =~ $RELEASE_REGEX ]]; then
                  echo "---> **** Internal release, GitHub release creation skipped. ****"
                  exit 0
                fi

                echo "**** Public release, create github.com release $VERSION. ****"
                ./ci/create-github-release.sh $OLM_RELEASE_VERSION $GH_API_TOKEN
