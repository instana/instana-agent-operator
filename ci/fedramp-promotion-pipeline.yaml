#
# (c) Copyright IBM Corp. 2025
#
---
groups:
  - name: fedramp-promotion
    jobs:
    - self-update
    - manual-trigger
    - artifact-promotion
  - name: manual-fedramp-version-bump
    jobs:
    - bump-fedramp-minor-version

var:
  instana-operator-git-repo-config: &instana-operator-git-repo-config
    uri: https://github.com/instana/instana-agent-operator.git
    branch: main
    username: instanacd
    password: ((instanacd-github-api-token))

resource_types:
  - name: cogito
    type: registry-image
    check_every: never
    source:
      repository: delivery.instana.io/int-docker-cogito-instana-local/cogito
      tag: latest
      username: ((delivery-instana-io-internal-project-artifact-read-writer-creds.username))
      password: ((delivery-instana-io-internal-project-artifact-read-writer-creds.password))

  - name: slack-notification
    type: registry-image
    source:
      repository: cfcommunity/slack-notification-resource
      tag: latest

resources:
  - name: gh-status
    type: cogito
    source:
      owner: instana
      repo: instana-agent-operator
      access_token: ((instanacd-github-api-token))
      context_prefix: concourse
      github_host: github.com

  - name: slack-alert
    type: slack-notification
    source:
      url: ((tech-agent-delivery-notifications-slack-hook))

  - name: agent-operator-git-source
    type: git
    icon: github
    source:
      <<: *instana-operator-git-repo-config

  - name: fedramp-version
    type: semver
    icon: alpha
    source:
      driver: gcs
      initial_version: 1.0.0
      bucket: instana-agent-qa-versioning
      key: operator/fedramp/version
      json_key: ((project-berlin-tests-gcp-instana-qa))

jobs:
  - name: bump-fedramp-minor-version
    max_in_flight: 1
    plan:
    - put: fedramp-version
      params: { bump: minor }

  - name: self-update
    on_success:
      put: gh-status
      inputs: [ agent-operator-git-source ]
      params: { state: success, context: self-update }
    on_failure:
      do:
        - put: slack-alert
          params:
            channel: '#tech-agent-delivery-notifications'
            text: |
              :x: the operator fedramp self-update has failed. <!subteam^SNMD75GH3> please check <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|the build job>.
        - put: gh-status
          inputs: [ agent-operator-git-source ]
          params: { state: failure, context: self-update }
    on_error:
      do:
        - put: slack-alert
          params:
            channel: '#tech-agent-delivery-notifications'
            text: |
              :x: the operator fedramp self-update has failed. <!subteam^SNMD75GH3> please check <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|the build job>.
        - put: gh-status
          inputs: [ agent-operator-git-source ]
          params: { state: error, context: self-update }
    on_abort:
      put: gh-status
      inputs: [ agent-operator-git-source ]
      params: { state: error, context: self-update }
    plan:
      - get: agent-operator-git-source
        trigger: true
      - put: gh-status
        inputs: [ agent-operator-git-source ]
        params: { state: pending, context: self-update }
      - put: gh-status
        inputs: [ agent-operator-git-source ]
        params: { state: pending, context: self-update }
      - set_pipeline: self
        file: agent-operator-git-source/ci/fedramp-promotion-pipeline.yaml

  - name: manual-trigger
    max_in_flight: 1
    plan:
      - get: agent-operator-git-source
      - get: fedramp-version
  
  - name: artifact-promotion
    on_success:
      do: 
      - put: gh-status
        inputs: [ agent-operator-git-source ]
        params: { state: success, context: artifact-promotion }
      - put: fedramp-version
        params: { bump: patch }
    on_failure:
      do:
        - put: slack-alert
          params:
            channel: '#tech-agent-delivery-notifications'
            text: |
              :x: the operator fedramp artifact-promotion has failed. <!subteam^SNMD75GH3> please check <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|the build job>.
        - put: gh-status
          inputs: [ agent-operator-git-source ]
          params: { state: failure, context: artifact-promotion }
    on_error:
      do:
        - put: slack-alert
          params:
            channel: '#tech-agent-delivery-notifications'
            text: |
              :x: the operator fedramp artifact-promotion has failed. <!subteam^SNMD75GH3> please check <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|the build job>.
        - put: gh-status
          inputs: [ agent-operator-git-source ]
          params: { state: error, context: artifact-promotion }
    on_abort:
      put: gh-status
      inputs: [ agent-operator-git-source ]
      params: { state: error, context: artifact-promotion }
    max_in_flight: 1
    plan:
      - get: agent-operator-git-source
        passed: [manual-trigger]
        trigger: true
      - get: fedramp-version
        passed: [manual-trigger]
      - task: promote-artifacts
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: delivery.instana.io/int-docker-agent-local/instana-agent-operator/e2e-test-base-image
              tag: main
              username: ((delivery-instana-io-internal-project-artifact-read-writer-creds.username))
              password: ((delivery-instana-io-internal-project-artifact-read-writer-creds.password))
          params:
            ARTIFACTORY_USERNAME_RELEASE: ((delivery-instana-io-release-project-artifact-read-writer-creds.username))
            ARTIFACTORY_PASSWORD_RELEASE: ((delivery-instana-io-release-project-artifact-read-writer-creds.password))
            ARTIFACTORY_BASE_URL: ((delivery-artifactory-base-url))
            ARTIFACTORY_CONTAINER_DOCKER_URL: ((delivery-artifactory-docker-agent-release-url))
            ARTIFACTORY_CONTAINER_FEDRAMP_DOCKER_URL: ((delivery-artifactory-docker-agent-fedramp-url))
            ARTIFACTORY_GENERIC_FEDRAMP_URL: ((delivery-artifactory-generic-agent-fedramp-url))
          inputs:
            - name: agent-operator-git-source
            - name: fedramp-version
          run:
            path: /bin/bash
            args:
              - -c
              - |
                #!/bin/bash

                RELEASE_ARTIFACTORY_REPOSITORY="${ARTIFACTORY_CONTAINER_DOCKER_URL}/instana-agent-operator"
                FEDRAMP_ARTIFACTORY_REPOSITORY="${ARTIFACTORY_CONTAINER_FEDRAMP_DOCKER_URL}/instana-agent-operator"
                FEDRAMP_GENERIC_REPOSITORY="${ARTIFACTORY_GENERIC_FEDRAMP_URL}/instana-agent-operator"
                export ARTIFACT_VERSION
                pushd agent-operator-git-source
                  source ./ci/scripts/get-latest-fedramp-release-version.sh
                popd
                FEDRAMP_VERSION=$(cat fedramp-version/number)

                # Check if ARTIFACT_VERSION is set
                if [ -z "$ARTIFACT_VERSION" ]; then
                  echo "Error: ARTIFACT_VERSION is not set. Failed to get the latest FedRAMP release version."
                  exit 1
                fi

                # Check if FEDRAMP_VERSION is set
                if [ -z "$FEDRAMP_VERSION" ]; then
                  echo "Error: FEDRAMP_VERSION is not set. Failed to read version from fedramp-version/number."
                  exit 1
                fi

                # strip the leading "v" from the operator version for release:
                export PREFIX="v"
                export OPERATOR_DOCKER_VERSION=${ARTIFACT_VERSION#"$PREFIX"}
                COMBINED_VERSION=${OPERATOR_DOCKER_VERSION}.fedramp-${FEDRAMP_VERSION}

                # Validate OPERATOR_DOCKER_VERSION before using it
                if [ -z "$OPERATOR_DOCKER_VERSION" ]; then
                  echo "Error: OPERATOR_DOCKER_VERSION is not set. Cannot proceed with artifact promotion."
                  exit 1
                fi

                # Validate COMBINED_VERSION before using it
                if [ -z "$COMBINED_VERSION" ]; then
                  echo "Error: COMBINED_VERSION is not set. Cannot proceed with artifact promotion."
                  exit 1
                fi

                echo "Using OPERATOR_DOCKER_VERSION=$OPERATOR_DOCKER_VERSION and COMBINED_VERSION=$COMBINED_VERSION"

                echo "---> Pushing multi-architectural manifest to ${FEDRAMP_ARTIFACTORY_REPOSITORY}"
                skopeo copy -a --preserve-digests \
                  --src-username ${ARTIFACTORY_USERNAME_RELEASE} \
                  --src-password ${ARTIFACTORY_PASSWORD_RELEASE} \
                  --dest-username ${ARTIFACTORY_USERNAME_RELEASE} \
                  --dest-password ${ARTIFACTORY_PASSWORD_RELEASE} \
                  docker://${RELEASE_ARTIFACTORY_REPOSITORY}:${OPERATOR_DOCKER_VERSION} \
                  docker://${FEDRAMP_ARTIFACTORY_REPOSITORY}:${COMBINED_VERSION}
                
                echo "---> Pushing multi-architectural manifest to ${FEDRAMP_ARTIFACTORY_REPOSITORY} with latest tag"
                skopeo copy -a --preserve-digests \
                  --src-username ${ARTIFACTORY_USERNAME_RELEASE} \
                  --src-password ${ARTIFACTORY_PASSWORD_RELEASE} \
                  --dest-username ${ARTIFACTORY_USERNAME_RELEASE} \
                  --dest-password ${ARTIFACTORY_PASSWORD_RELEASE} \
                  docker://${RELEASE_ARTIFACTORY_REPOSITORY}:${OPERATOR_DOCKER_VERSION} \
                  docker://${FEDRAMP_ARTIFACTORY_REPOSITORY}:latest
                
                echo "Pull the released manifest and replace icr.io image with FedRAMP artifactory image"
                VERSION=${OPERATOR_DOCKER_VERSION} COMBINED_VERSION=${COMBINED_VERSION} ./agent-operator-git-source/ci/scripts/fedramp-manifest-converter.sh

                MANIFEST_FILE_FEDRAMP="instana-agent-operator.yaml"
                echo "Verify the size of the instana-agent-operator.yaml before pushing"
                if [ -s $MANIFEST_FILE_FEDRAMP ]; then
                  echo "File exists and it's not empty"
                else
                  echo "Download failed or file is empty. Aborting"
                  exit 1
                fi

                echo "---> Pushing operator YAML to ${FEDRAMP_GENERIC_REPOSITORY} with $COMBINED_VERSION"
                curl -u ${ARTIFACTORY_USERNAME_RELEASE}:${ARTIFACTORY_PASSWORD_RELEASE} \ 
                      -T $MANIFEST_FILE_FEDRAMP $FEDRAMP_GENERIC_REPOSITORY/$COMBINED_VERSION/instana-agent-operator.yaml
                
                echo "---> Pushing operator YAML to ${FEDRAMP_GENERIC_REPOSITORY} with latest"
                curl -u ${ARTIFACTORY_USERNAME_RELEASE}:${ARTIFACTORY_PASSWORD_RELEASE} \ 
                      -T $MANIFEST_FILE_FEDRAMP $FEDRAMP_GENERIC_REPOSITORY/latest/instana-agent-operator.yaml
