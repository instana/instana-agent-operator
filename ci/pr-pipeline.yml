---
aliases:
  gh-status-hooks: &gh-status-hooks
    on_success:
      put: gh-status
      inputs: [ instana-agent-operator ]
      params: { state: success }
    on_failure:
      put: gh-status
      inputs: [ instana-agent-operator ]
      params: { state: failure }
    on_error:
      put: gh-status
      inputs: [ instana-agent-operator ]
      params: { state: error }
    on_abort:
      put: gh-status
      inputs: [ instana-agent-operator ]
      params: { state: error }
  gh-status-set-pending: &gh-status-set-pending
    put: gh-status
    inputs: [ instana-agent-operator ]
    params: { state: pending }
  gh-status-set-pending-build: &gh-status-set-pending-build
    put: gh-status
    inputs: [ instana-agent-operator ]
    params: { state: pending, context: build-and-test-operator/build }
  gh-status-set-pending-unit-test: &gh-status-set-pending-unit-test
    put: gh-status
    inputs: [ instana-agent-operator ]
    params: { state: pending, context: build-and-test-operator/unit-test }

var:
  instana-operator-git-repo-config: &instana-operator-git-repo-config
    uri: https://github.com/instana/instana-agent-operator.git
    username: ((project-berlin-gh-token))
    password: x-oauth-basic
    branch: &build-branch ((branch))
    git_config:
      - name: user.name
        value: Stan
      - name: user.email
        value: stan@instana.com

resource_types:
  - name: cogito
    type: registry-image
    check_every: never
    source:
      repository: delivery.instana.io/int-docker-cogito-instana-local/cogito
      tag: latest
      username: ((delivery-instana-io-internal-project-artifact-read-writer-creds.username))
      password: ((delivery-instana-io-internal-project-artifact-read-writer-creds.password))

  - name: docker-manifest
    type: registry-image
    source:
      repository: gcr.io/instana-agent-qa/concourse-docker-manifest-resource
      username: _json_key
      password: ((project-berlin-tests-gcp-instana-qa))

resources:
  - name: pipeline-source
    type: git
    icon: github
    source:
      <<: *instana-operator-git-repo-config

  - name: instana-agent-operator
    type: git
    icon: github
    source:
      <<: *instana-operator-git-repo-config

  - name: gh-status
    type: cogito
    source:
      owner: instana
      repo: instana-agent-operator
      access_token: ((instanacd-github-api-token))
      context_prefix: concourse
      github_host: github.com
  
  - name: golangci-lint-release
    type: github-release
    check_every: 24h
    source:
      owner: golangci
      repository: golangci-lint

  # dummy value for now, on main it gets calculated from the tag name
  - name: agent-operator-version
    type: semver
    source:
      driver: gcs
      bucket: instana-agent-qa-versioning
      key: agent-operator-version/image
      json_key: ((project-berlin-tests-gcp-instana-qa))

  - name: agent-operator-image-amd64
    type: registry-image
    icon: docker
    source:
      repository: delivery.instana.io/int-docker-agent-local/instana-agent-operator
      tag: snapshot-amd64
      username: ((delivery-instana-io-internal-project-artifact-read-writer-creds.username))
      password: ((delivery-instana-io-internal-project-artifact-read-writer-creds.password))
  - name: agent-operator-image-arm64
    type: registry-image
    icon: docker
    source:
      repository: delivery.instana.io/int-docker-agent-local/instana-agent-operator
      tag: snapshot-arm64
      username: ((delivery-instana-io-internal-project-artifact-read-writer-creds.username))
      password: ((delivery-instana-io-internal-project-artifact-read-writer-creds.password))
  - name: agent-operator-image-ppc64le
    type: registry-image
    icon: docker
    source:
      repository: delivery.instana.io/int-docker-agent-local/instana-agent-operator
      tag: snapshot-ppc64le
      username: ((delivery-instana-io-internal-project-artifact-read-writer-creds.username))
      password: ((delivery-instana-io-internal-project-artifact-read-writer-creds.password))
  - name: agent-operator-image-s390x
    type: registry-image
    icon: docker
    source:
      repository: delivery.instana.io/int-docker-agent-local/instana-agent-operator
      tag: snapshot-s390x
      username: ((delivery-instana-io-internal-project-artifact-read-writer-creds.username))
      password: ((delivery-instana-io-internal-project-artifact-read-writer-creds.password))
  - name: operator-manifest-gcr
    type: docker-manifest
    icon: docker
    source: 
      repository: delivery.instana.io/int-docker-agent-local/instana-agent-operator
      username: ((delivery-instana-io-internal-project-artifact-read-writer-creds.username))
      password: ((delivery-instana-io-internal-project-artifact-read-writer-creds.password))
  - name: latest-agent-image-manifest
    type: registry-image
    icon: docker
    source:
      repository: icr.io/instana/agent
      tag: latest
      username: iamapikey
      password: ((concourse-icr-containers-public.password))

jobs:
  - name: self-update
    <<: *gh-status-hooks
    max_in_flight: 1
    plan:
      - get: instana-agent-operator
      - <<: *gh-status-set-pending
      - get: pipeline-source
        trigger: true
      - set_pipeline: self
        file: pipeline-source/ci/pr-pipeline.yml
        vars:
          branch: *build-branch
          project-berlin-gh-token: ((project-berlin-gh-token))
          delivery-instana-io-release-project-artifact-read-writer-creds: ((delivery-instana-io-release-project-artifact-read-writer-creds))

  - name: build-and-test-agent-operator
    max_in_flight: 1
    plan:
      - get: pipeline-source
        trigger: true
        passed: [self-update]
      - get: instana-agent-operator
      - <<: *gh-status-set-pending-build
      - <<: *gh-status-set-pending-unit-test
      - task: build
        privileged: true
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: registry.access.redhat.com/ubi8/ubi-minimal
          inputs:
            - name: pipeline-source
          run:
            path: bash
            args:
              - -ceu
              - |
                cd pipeline-source
                microdnf install make python3-devel gcc git tar gzip zip curl jq
                pip3 install pyyaml
                
                export PATH="$PATH:/usr/local/go/bin"
                export GOPATH=/go
                export GO_VERSION=1.22.1
                export GO_SHA256="aab8e15785c997ae20f9c88422ee35d962c4562212bb0f879d052a35c8307c7f go${GO_VERSION}.linux-amd64.tar.gz"
                curl -L --fail --show-error --silent "https://golang.org/dl/go${GO_VERSION}.linux-amd64.tar.gz" -o "go${GO_VERSION}.linux-amd64.tar.gz" \
                && echo "${GO_SHA256}" | sha256sum --check \
                && rm -rf /usr/local/go \
                && tar -C /usr/local -xzf "go${GO_VERSION}.linux-amd64.tar.gz" \
                && mkdir -p "${GOPATH}" \
                && go version
                make build
        on_success:
          put: gh-status
          inputs: [ instana-agent-operator ]
          params: { state: success, context: build-and-test-operator/build }
          on_failure:
            put: gh-status
            inputs: [ instana-agent-operator ]
            params: { state: failure, context: build-and-test-operator/build }
          on_error:
            put: gh-status
            inputs: [ instana-agent-operator ]
            params: { state: error, context: build-and-test-operator/build }
          on_abort:
            put: gh-status
            inputs: [ instana-agent-operator ]
            params: { state: error, context: build-and-test-operator/build }
      - get: golangci-lint-release
        params:
          globs:
          - golangci-lint-*-linux-amd64.rpm
      - task: unit-test
        privileged: true
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: registry.access.redhat.com/ubi8/ubi-minimal
          inputs:
            - name: pipeline-source
            - name: golangci-lint-release
          caches:
            - path: /go/pkg/mod
          run:
            path: bash
            args:
              - -ceu
              - |
                microdnf install make python3-devel gcc git tar gzip zip curl jq
                pip3 install pyyaml
                
                pushd golangci-lint-release
                LINTER_RPM=$(ls golangci-lint-*-linux-amd64.rpm)
                rpm -i $LINTER_RPM
                popd
                
                cd pipeline-source
                export PATH="$PATH:/usr/local/go/bin"
                export GOPATH=/go
                export GO_VERSION=1.22.1
                curl -L --fail --show-error --silent "https://golang.org/dl/go${GO_VERSION}.linux-amd64.tar.gz" -o "go${GO_VERSION}.linux-amd64.tar.gz" \
                && rm -rf /usr/local/go \
                && tar -C /usr/local -xzf "go${GO_VERSION}.linux-amd64.tar.gz" \
                && mkdir -p "${GOPATH}" \
                && go version
                make lint test
        on_success:
          put: gh-status
          inputs: [ instana-agent-operator ]
          params: { state: success, context: build-and-test-operator/unit-test }
        on_failure:
          put: gh-status
          inputs: [ instana-agent-operator ]
          params: { state: failure, context: build-and-test-operator/unit-test }
        on_error:
          put: gh-status
          inputs: [ instana-agent-operator ]
          params: { state: error, context: build-and-test-operator/unit-test }
        on_abort:
          put: gh-status
          inputs: [ instana-agent-operator ]
          params: { state: error, context: build-and-test-operator/unit-test }

  - name: multi-arch-docker-build
    max_in_flight: 1
    plan:
      - get: pipeline-source
        trigger: true
        passed: [self-update]
      - get: agent-operator-version
        trigger: true
      - load_var: agent-operator-version
        file: agent-operator-version/number
        reveal: true
      - load_var: git-commit
        file: pipeline-source/.git/short_ref
        reveal: true
      - task: build-images
        privileged: true
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: delivery.instana.io/int-docker-private-virtual/concourse/oci-build-task
              tag: 0.11.0
              username: ((delivery-instana-io-internal-project-artifact-read-writer-creds.username))
              password: ((delivery-instana-io-internal-project-artifact-read-writer-creds.password))
          inputs:
            - name: pipeline-source
          outputs:
            - name: image
          params:
            CONTEXT: pipeline-source
            DOCKERFILE: pipeline-source/Dockerfile
            IMAGE_PLATFORM: linux/amd64,linux/arm64,linux/ppc64le,linux/s390x # This param tells the `concourse-oci-build-task` task which architecture to build the image for.
            OUTPUT_OCI: true # outputs an OCI compliant image, allowing for multi-arch image builds when setting IMAGE_PLATFORM to multiple platforms. The image output format will be a directory when this flag is set to true.
            BUILD_ARG_VERSION: ((.:agent-operator-version)) # required by the instana-agent-operator Dockerfile
            BUILD_ARG_GIT_COMMIT: ((.:git-commit)) # required by the instana-agent-operator Dockerfile
          run:
            path: build

  - name: docker-build
    max_in_flight: 1
    plan:
      - get: pipeline-source
        trigger: true
        passed: [self-update]
      - get: agent-operator-version
        trigger: true
      - load_var: agent-operator-version
        file: agent-operator-version/number
        reveal: true
      - load_var: git-commit
        file: pipeline-source/.git/short_ref
        reveal: true
      - in_parallel:
          fail_fast: true
          steps:
            - task: build-amd64
              privileged: true
              file: pipeline-source/ci/container-image-build-task.yml
              input_mapping:
                source: pipeline-source
              output_mapping: 
                image: image-amd64
              vars:
                dockerfile: Dockerfile
                target-platform: linux/amd64
                version: ((.:agent-operator-version))
                git-commit: ((.:git-commit))
            - task: build-arm64
              privileged: true
              file: pipeline-source/ci/container-image-build-task.yml
              input_mapping:
                source: pipeline-source
              output_mapping: 
                image: image-arm64
              vars:
                dockerfile: Dockerfile
                target-platform: linux/arm64
                version: ((.:agent-operator-version))
                git-commit: ((.:git-commit))
            - task: build-s390x
              privileged: true
              file: pipeline-source/ci/container-image-build-task.yml
              input_mapping:
                source: pipeline-source
              output_mapping: 
                image: image-s390x
              vars:
                dockerfile: Dockerfile
                target-platform: linux/s390x
                version: ((.:agent-operator-version))
                git-commit: ((.:git-commit))
            - task: build-ppc64le
              privileged: true
              file: pipeline-source/ci/container-image-build-task.yml
              input_mapping:
                source: pipeline-source
              output_mapping: 
                image: image-ppc64le
              vars:
                dockerfile: Dockerfile
                target-platform: linux/ppc64le
                version: ((.:agent-operator-version))
                git-commit: ((.:git-commit))
      - in_parallel:
          fail_fast: true
          steps:
            - put: agent-operator-image-amd64
              params:
                image: image-amd64/image.tar
            - put: agent-operator-image-arm64
              params:
                image: image-arm64/image.tar
            - put: agent-operator-image-ppc64le
              params:
                image: image-ppc64le/image.tar
            - put: agent-operator-image-s390x
              params:
                image: image-s390x/image.tar
      - task: multiarch-manifest-tags
        privileged: true
        file: pipeline-source/ci/create-tag-file.yml
        output_mapping:
          version: version
        vars:
          git-commit: ((.:git-commit))
          version: ((.:agent-operator-version))
      - put: operator-manifest-gcr
        params:
          tag_file: version/manifest-tags
          manifests:
            - arch: amd64
              os: linux
              digest_file: agent-operator-image-amd64/digest
            - arch: arm64
              os: linux
              digest_file: agent-operator-image-arm64/digest
            - arch: ppc64le
              os: linux
              digest_file: agent-operator-image-ppc64le/digest
            - arch: s390x
              os: linux
              digest_file: agent-operator-image-s390x/digest

  - name: operator-olm-build
    max_in_flight: 1
    plan:
      - get: pipeline-source
        trigger: true
        passed: [docker-build]
      - get: agent-operator-version
      - load_var: agent-operator-version
        file: agent-operator-version/number
        reveal: true
      - get: latest-agent-image-manifest
        params: { skip_download: true }
      - load_var: agent-image-digest
        file: latest-agent-image-manifest/digest
        reveal: true
      - load_var: git-commit
        file: pipeline-source/.git/short_ref
        reveal: true
      - task: build
        privileged: true
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: registry.access.redhat.com/ubi8/ubi-minimal
          inputs:
            - name: pipeline-source
          params:
            GIT_COMMIT: ((.:git-commit))
            VERSION: ((.:agent-operator-version))
            AGENT_IMG_DIGEST: ((.:agent-image-digest))
            DELIVERY_INSTANA_IO_USER: ((delivery-instana-io-internal-project-artifact-read-writer-creds.username))
            DELIVERY_INSTANA_IO_PW: ((delivery-instana-io-internal-project-artifact-read-writer-creds.password))
          run:
            path: bash
            args:
              - -ceu
              - |
                microdnf install make python3-devel gcc git tar gzip zip curl jq skopeo
                pip3 install pyyaml

                IMAGE_TAG=${GIT_COMMIT}
                set +x
                unset HISTFILE
                skopeo login -u ${DELIVERY_INSTANA_IO_USER} -p ${DELIVERY_INSTANA_IO_PW} delivery.instana.io
                set -x

                OPERATOR_IMAGE_NAME=delivery.instana.io/int-docker-agent-local/instana-agent-operator
                OPERATOR_IMG_DIGEST=$(skopeo inspect --format "{{.Digest}}" docker://${OPERATOR_IMAGE_NAME}:${IMAGE_TAG})
                echo "OPERATOR_IMG_DIGEST=$OPERATOR_IMG_DIGEST"

                export PATH="$PATH:/usr/local/go/bin"
                export GOPATH=/go
                export GO_VERSION=1.22.3
                export GO_SHA256="8920ea521bad8f6b7bc377b4824982e011c19af27df88a815e3586ea895f1b36 go${GO_VERSION}.linux-amd64.tar.gz"

                curl -L --fail --show-error --silent "https://golang.org/dl/go${GO_VERSION}.linux-amd64.tar.gz" -o "go${GO_VERSION}.linux-amd64.tar.gz" \
                && echo "${GO_SHA256}" | sha256sum --check \
                && rm -rf /usr/local/go \
                && tar -C /usr/local -xzf "go${GO_VERSION}.linux-amd64.tar.gz" \
                && mkdir -p "${GOPATH}" \
                && go version

                pushd pipeline-source

                # Create a place to store our output for packaging up
                mkdir -p target

                # strip the leading "v" from the operator version for github artefacts and release:
                export PREFIX="v"
                export OLM_RELEASE_VERSION=${VERSION#"$PREFIX"}

                # Get currently published version of the OLM bundle in the community operators project, so we can correctly set the 'replaces' field
                # Uses jq to filter out non-release versions
                export PREV_VERSION=$(curl --silent --fail --show-error -L https://api.github.com/repos/instana/instana-agent-operator/tags \
                  | jq 'map(select(.name | test("^v[0-9]+.[0-9]+.[0-9]+$"))) | .[1].name' \
                  | sed 's/[^0-9]*\([0-9]\+\.[0-9]\+\.[0-9]\+\).*/\1/')

                if [[ "x${PREV_VERSION}" = "x" ]]; then
                  echo "!! Could not determine previous released version. Fix either pipeline or tag history !!"
                  exit 1
                fi

                echo "Operator manifest SHA found, using digest ${OPERATOR_IMG_DIGEST} for Operator image"
                export OPERATOR_IMAGE="${OPERATOR_IMAGE_NAME}@${OPERATOR_IMG_DIGEST}"

                # Create bundle for public operator with image: delivery.instana.io/int-docker-agent-local/instana-agent-operator:<version>
                make IMG="${OPERATOR_IMAGE}" \
                  VERSION="${OLM_RELEASE_VERSION}" \
                  PREV_VERSION="${PREV_VERSION}" \
                  AGENT_IMG="icr.io/instana/agent@${AGENT_IMG_DIGEST}" \
                  bundle

                pushd bundle
                zip -r ../target/olm-${OLM_RELEASE_VERSION}.zip .
                popd

                # Create the YAML for installing the Agent Operator, which we want to package with the release
                make --silent IMG="${OPERATOR_IMAGE_NAME}:${OLM_RELEASE_VERSION}" controller-yaml > target/instana-agent-operator.yaml

                echo "===== DISPLAYING target/instana-agent-operator.yaml ====="
                echo
                cat target/instana-agent-operator.yaml
