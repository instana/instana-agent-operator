// /*
// (c) Copyright IBM Corp. 2024
// (c) Copyright Instana Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */
//

// Code generated by MockGen. DO NOT EDIT.
package containers_instana_io_secret

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockdockerConfigMarshaler is a mock of dockerConfigMarshaler interface.
type MockdockerConfigMarshaler struct {
	ctrl     *gomock.Controller
	recorder *MockdockerConfigMarshalerMockRecorder
}

// MockdockerConfigMarshalerMockRecorder is the mock recorder for MockdockerConfigMarshaler.
type MockdockerConfigMarshalerMockRecorder struct {
	mock *MockdockerConfigMarshaler
}

// NewMockdockerConfigMarshaler creates a new mock instance.
func NewMockdockerConfigMarshaler(ctrl *gomock.Controller) *MockdockerConfigMarshaler {
	mock := &MockdockerConfigMarshaler{ctrl: ctrl}
	mock.recorder = &MockdockerConfigMarshalerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdockerConfigMarshaler) EXPECT() *MockdockerConfigMarshalerMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockdockerConfigMarshaler) ISGOMOCK() struct{} {
	return struct{}{}
}

// MarshalOrDie mocks base method.
func (m *MockdockerConfigMarshaler) MarshalOrDie(obj *DockerConfigJson) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalOrDie", obj)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// MarshalOrDie indicates an expected call of MarshalOrDie.
func (mr *MockdockerConfigMarshalerMockRecorder) MarshalOrDie(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalOrDie", reflect.TypeOf((*MockdockerConfigMarshaler)(nil).MarshalOrDie), obj)
}

// UnMarshalOrDie mocks base method.
func (m *MockdockerConfigMarshaler) UnMarshalOrDie(raw []byte) *DockerConfigJson {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnMarshalOrDie", raw)
	ret0, _ := ret[0].(*DockerConfigJson)
	return ret0
}

// UnMarshalOrDie indicates an expected call of UnMarshalOrDie.
func (mr *MockdockerConfigMarshalerMockRecorder) UnMarshalOrDie(raw any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnMarshalOrDie", reflect.TypeOf((*MockdockerConfigMarshaler)(nil).UnMarshalOrDie), raw)
}
