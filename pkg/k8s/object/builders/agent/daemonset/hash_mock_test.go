// /*
// (c) Copyright IBM Corp. 2024
// (c) Copyright Instana Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */
//

// Code generated by MockGen. DO NOT EDIT.
package daemonset

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockJsonHasher is a mock of JsonHasher interface.
type MockJsonHasher struct {
	ctrl     *gomock.Controller
	recorder *MockJsonHasherMockRecorder
}

// MockJsonHasherMockRecorder is the mock recorder for MockJsonHasher.
type MockJsonHasherMockRecorder struct {
	mock *MockJsonHasher
}

// NewMockJsonHasher creates a new mock instance.
func NewMockJsonHasher(ctrl *gomock.Controller) *MockJsonHasher {
	mock := &MockJsonHasher{ctrl: ctrl}
	mock.recorder = &MockJsonHasherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJsonHasher) EXPECT() *MockJsonHasherMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockJsonHasher) ISGOMOCK() struct{} {
	return struct{}{}
}

// HashJsonOrDie mocks base method.
func (m *MockJsonHasher) HashJsonOrDie(obj any) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashJsonOrDie", obj)
	ret0, _ := ret[0].(string)
	return ret0
}

// HashJsonOrDie indicates an expected call of HashJsonOrDie.
func (mr *MockJsonHasherMockRecorder) HashJsonOrDie(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashJsonOrDie", reflect.TypeOf((*MockJsonHasher)(nil).HashJsonOrDie), obj)
}
