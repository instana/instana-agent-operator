// /*
// (c) Copyright IBM Corp. 2024
// (c) Copyright Instana Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */
//

// Code generated by MockGen. DO NOT EDIT.
package daemonset

import (
	reflect "reflect"

	volume "github.com/instana/instana-agent-operator/pkg/k8s/object/builders/common/volume"
	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/api/core/v1"
)

// MockVolumeBuilder is a mock of VolumeBuilder interface.
type MockVolumeBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockVolumeBuilderMockRecorder
}

// MockVolumeBuilderMockRecorder is the mock recorder for MockVolumeBuilder.
type MockVolumeBuilderMockRecorder struct {
	mock *MockVolumeBuilder
}

// NewMockVolumeBuilder creates a new mock instance.
func NewMockVolumeBuilder(ctrl *gomock.Controller) *MockVolumeBuilder {
	mock := &MockVolumeBuilder{ctrl: ctrl}
	mock.recorder = &MockVolumeBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVolumeBuilder) EXPECT() *MockVolumeBuilderMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockVolumeBuilder) ISGOMOCK() struct{} {
	return struct{}{}
}

// Build mocks base method.
func (m *MockVolumeBuilder) Build(volumes ...volume.Volume) ([]v1.Volume, []v1.VolumeMount) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range volumes {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Build", varargs...)
	ret0, _ := ret[0].([]v1.Volume)
	ret1, _ := ret[1].([]v1.VolumeMount)
	return ret0, ret1
}

// Build indicates an expected call of Build.
func (mr *MockVolumeBuilderMockRecorder) Build(volumes ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockVolumeBuilder)(nil).Build), volumes...)
}
