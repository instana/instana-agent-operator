// /*
// (c) Copyright IBM Corp. 2024
// (c) Copyright Instana Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */
//

// Code generated by MockGen. DO NOT EDIT.
package daemonset

import (
	reflect "reflect"

	env "github.com/instana/instana-agent-operator/pkg/k8s/object/builders/common/env"
	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/api/core/v1"
)

// MockEnvBuilder is a mock of EnvBuilder interface.
type MockEnvBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockEnvBuilderMockRecorder
}

// MockEnvBuilderMockRecorder is the mock recorder for MockEnvBuilder.
type MockEnvBuilderMockRecorder struct {
	mock *MockEnvBuilder
}

// NewMockEnvBuilder creates a new mock instance.
func NewMockEnvBuilder(ctrl *gomock.Controller) *MockEnvBuilder {
	mock := &MockEnvBuilder{ctrl: ctrl}
	mock.recorder = &MockEnvBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnvBuilder) EXPECT() *MockEnvBuilderMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockEnvBuilder) ISGOMOCK() struct{} {
	return struct{}{}
}

// Build mocks base method.
func (m *MockEnvBuilder) Build(envVars ...env.EnvVar) []v1.EnvVar {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range envVars {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Build", varargs...)
	ret0, _ := ret[0].([]v1.EnvVar)
	return ret0
}

// Build indicates an expected call of Build.
func (mr *MockEnvBuilderMockRecorder) Build(envVars ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockEnvBuilder)(nil).Build), envVars...)
}
