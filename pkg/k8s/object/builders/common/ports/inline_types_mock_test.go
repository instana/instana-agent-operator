// Code generated by MockGen. DO NOT EDIT.
// Source: ./api/v1/inline_types.go

// Package ports is a generated GoMock package.
package ports

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOpenTelemetrySettings is a mock of OpenTelemetrySettings interface.
type MockOpenTelemetrySettings struct {
	ctrl     *gomock.Controller
	recorder *MockOpenTelemetrySettingsMockRecorder
}

// MockOpenTelemetrySettingsMockRecorder is the mock recorder for MockOpenTelemetrySettings.
type MockOpenTelemetrySettingsMockRecorder struct {
	mock *MockOpenTelemetrySettings
}

// NewMockOpenTelemetrySettings creates a new mock instance.
func NewMockOpenTelemetrySettings(ctrl *gomock.Controller) *MockOpenTelemetrySettings {
	mock := &MockOpenTelemetrySettings{ctrl: ctrl}
	mock.recorder = &MockOpenTelemetrySettingsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpenTelemetrySettings) EXPECT() *MockOpenTelemetrySettingsMockRecorder {
	return m.recorder
}

// GrpcIsEnabled mocks base method.
func (m *MockOpenTelemetrySettings) GrpcIsEnabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrpcIsEnabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GrpcIsEnabled indicates an expected call of GrpcIsEnabled.
func (mr *MockOpenTelemetrySettingsMockRecorder) GrpcIsEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrpcIsEnabled", reflect.TypeOf((*MockOpenTelemetrySettings)(nil).GrpcIsEnabled))
}

// HttpIsEnabled mocks base method.
func (m *MockOpenTelemetrySettings) HttpIsEnabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HttpIsEnabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HttpIsEnabled indicates an expected call of HttpIsEnabled.
func (mr *MockOpenTelemetrySettingsMockRecorder) HttpIsEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HttpIsEnabled", reflect.TypeOf((*MockOpenTelemetrySettings)(nil).HttpIsEnabled))
}

// IsEnabled mocks base method.
func (m *MockOpenTelemetrySettings) IsEnabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEnabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEnabled indicates an expected call of IsEnabled.
func (mr *MockOpenTelemetrySettingsMockRecorder) IsEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEnabled", reflect.TypeOf((*MockOpenTelemetrySettings)(nil).IsEnabled))
}
