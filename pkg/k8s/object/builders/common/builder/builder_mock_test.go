// /*
// (c) Copyright IBM Corp. 2024
// (c) Copyright Instana Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */
//

// Code generated by MockGen. DO NOT EDIT.
package builder

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockObjectBuilder is a mock of ObjectBuilder interface.
type MockObjectBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockObjectBuilderMockRecorder
}

// MockObjectBuilderMockRecorder is the mock recorder for MockObjectBuilder.
type MockObjectBuilderMockRecorder struct {
	mock *MockObjectBuilder
}

// NewMockObjectBuilder creates a new mock instance.
func NewMockObjectBuilder(ctrl *gomock.Controller) *MockObjectBuilder {
	mock := &MockObjectBuilder{ctrl: ctrl}
	mock.recorder = &MockObjectBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectBuilder) EXPECT() *MockObjectBuilderMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockObjectBuilder) ISGOMOCK() struct{} {
	return struct{}{}
}

// Build mocks base method.
func (m *MockObjectBuilder) Build() OptionalObject {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build")
	ret0, _ := ret[0].(OptionalObject)
	return ret0
}

// Build indicates an expected call of Build.
func (mr *MockObjectBuilderMockRecorder) Build() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockObjectBuilder)(nil).Build))
}

// ComponentName mocks base method.
func (m *MockObjectBuilder) ComponentName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComponentName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ComponentName indicates an expected call of ComponentName.
func (mr *MockObjectBuilderMockRecorder) ComponentName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComponentName", reflect.TypeOf((*MockObjectBuilder)(nil).ComponentName))
}

// IsNamespaced mocks base method.
func (m *MockObjectBuilder) IsNamespaced() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNamespaced")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNamespaced indicates an expected call of IsNamespaced.
func (mr *MockObjectBuilderMockRecorder) IsNamespaced() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNamespaced", reflect.TypeOf((*MockObjectBuilder)(nil).IsNamespaced))
}

// MockBuilderTransformer is a mock of BuilderTransformer interface.
type MockBuilderTransformer struct {
	ctrl     *gomock.Controller
	recorder *MockBuilderTransformerMockRecorder
}

// MockBuilderTransformerMockRecorder is the mock recorder for MockBuilderTransformer.
type MockBuilderTransformerMockRecorder struct {
	mock *MockBuilderTransformer
}

// NewMockBuilderTransformer creates a new mock instance.
func NewMockBuilderTransformer(ctrl *gomock.Controller) *MockBuilderTransformer {
	mock := &MockBuilderTransformer{ctrl: ctrl}
	mock.recorder = &MockBuilderTransformerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuilderTransformer) EXPECT() *MockBuilderTransformerMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockBuilderTransformer) ISGOMOCK() struct{} {
	return struct{}{}
}

// Apply mocks base method.
func (m *MockBuilderTransformer) Apply(bldr ObjectBuilder) OptionalObject {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", bldr)
	ret0, _ := ret[0].(OptionalObject)
	return ret0
}

// Apply indicates an expected call of Apply.
func (mr *MockBuilderTransformerMockRecorder) Apply(bldr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockBuilderTransformer)(nil).Apply), bldr)
}
