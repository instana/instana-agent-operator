// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/k8s/object/builders/helpers/helpers.go

// Package env is a generated GoMock package.
package env

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHelpers is a mock of Helpers interface.
type MockHelpers struct {
	ctrl     *gomock.Controller
	recorder *MockHelpersMockRecorder
}

// MockHelpersMockRecorder is the mock recorder for MockHelpers.
type MockHelpersMockRecorder struct {
	mock *MockHelpers
}

// NewMockHelpers creates a new mock instance.
func NewMockHelpers(ctrl *gomock.Controller) *MockHelpers {
	mock := &MockHelpers{ctrl: ctrl}
	mock.recorder = &MockHelpersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHelpers) EXPECT() *MockHelpersMockRecorder {
	return m.recorder
}

// KeysSecretName mocks base method.
func (m *MockHelpers) KeysSecretName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeysSecretName")
	ret0, _ := ret[0].(string)
	return ret0
}

// KeysSecretName indicates an expected call of KeysSecretName.
func (mr *MockHelpersMockRecorder) KeysSecretName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeysSecretName", reflect.TypeOf((*MockHelpers)(nil).KeysSecretName))
}

// ServiceAccountName mocks base method.
func (m *MockHelpers) ServiceAccountName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceAccountName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ServiceAccountName indicates an expected call of ServiceAccountName.
func (mr *MockHelpersMockRecorder) ServiceAccountName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceAccountName", reflect.TypeOf((*MockHelpers)(nil).ServiceAccountName))
}
