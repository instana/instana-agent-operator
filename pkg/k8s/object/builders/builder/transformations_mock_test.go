// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/k8s/object/transformations/transformations.go

// Package builder is a generated GoMock package.
package builder

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	labels "k8s.io/apimachinery/pkg/labels"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockTransformations is a mock of Transformations interface.
type MockTransformations struct {
	ctrl     *gomock.Controller
	recorder *MockTransformationsMockRecorder
}

// MockTransformationsMockRecorder is the mock recorder for MockTransformations.
type MockTransformationsMockRecorder struct {
	mock *MockTransformations
}

// NewMockTransformations creates a new mock instance.
func NewMockTransformations(ctrl *gomock.Controller) *MockTransformations {
	mock := &MockTransformations{ctrl: ctrl}
	mock.recorder = &MockTransformationsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransformations) EXPECT() *MockTransformationsMockRecorder {
	return m.recorder
}

// AddCommonLabels mocks base method.
func (m *MockTransformations) AddCommonLabels(obj client.Object, component string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddCommonLabels", obj, component)
}

// AddCommonLabels indicates an expected call of AddCommonLabels.
func (mr *MockTransformationsMockRecorder) AddCommonLabels(obj, component interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCommonLabels", reflect.TypeOf((*MockTransformations)(nil).AddCommonLabels), obj, component)
}

// AddOwnerReference mocks base method.
func (m *MockTransformations) AddOwnerReference(obj client.Object) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddOwnerReference", obj)
}

// AddOwnerReference indicates an expected call of AddOwnerReference.
func (mr *MockTransformationsMockRecorder) AddOwnerReference(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOwnerReference", reflect.TypeOf((*MockTransformations)(nil).AddOwnerReference), obj)
}

// PreviousGenerationsSelector mocks base method.
func (m *MockTransformations) PreviousGenerationsSelector() labels.Selector {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreviousGenerationsSelector")
	ret0, _ := ret[0].(labels.Selector)
	return ret0
}

// PreviousGenerationsSelector indicates an expected call of PreviousGenerationsSelector.
func (mr *MockTransformationsMockRecorder) PreviousGenerationsSelector() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreviousGenerationsSelector", reflect.TypeOf((*MockTransformations)(nil).PreviousGenerationsSelector))
}
