// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/k8s/object/builders/env/env_builder.go

// Package daemonset is a generated GoMock package.
package daemonset

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	env "github.com/instana/instana-agent-operator/pkg/k8s/object/builders/env"
	v1 "k8s.io/api/core/v1"
)

// MockEnvBuilder is a mock of EnvBuilder interface.
type MockEnvBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockEnvBuilderMockRecorder
}

// MockEnvBuilderMockRecorder is the mock recorder for MockEnvBuilder.
type MockEnvBuilderMockRecorder struct {
	mock *MockEnvBuilder
}

// NewMockEnvBuilder creates a new mock instance.
func NewMockEnvBuilder(ctrl *gomock.Controller) *MockEnvBuilder {
	mock := &MockEnvBuilder{ctrl: ctrl}
	mock.recorder = &MockEnvBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnvBuilder) EXPECT() *MockEnvBuilderMockRecorder {
	return m.recorder
}

// Build mocks base method.
func (m *MockEnvBuilder) Build(envVars ...env.EnvVar) []v1.EnvVar {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range envVars {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Build", varargs...)
	ret0, _ := ret[0].([]v1.EnvVar)
	return ret0
}

// Build indicates an expected call of Build.
func (mr *MockEnvBuilderMockRecorder) Build(envVars ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockEnvBuilder)(nil).Build), envVars...)
}
