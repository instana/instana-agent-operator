// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/k8s/object/builders/ports/ports.go

// Package daemonset is a generated GoMock package.
package daemonset

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	ports "github.com/instana/instana-agent-operator/pkg/k8s/object/builders/ports"
	v1 "k8s.io/api/core/v1"
)

// MockPortsBuilder is a mock of PortsBuilder interface.
type MockPortsBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockPortsBuilderMockRecorder
}

// MockPortsBuilderMockRecorder is the mock recorder for MockPortsBuilder.
type MockPortsBuilderMockRecorder struct {
	mock *MockPortsBuilder
}

// NewMockPortsBuilder creates a new mock instance.
func NewMockPortsBuilder(ctrl *gomock.Controller) *MockPortsBuilder {
	mock := &MockPortsBuilder{ctrl: ctrl}
	mock.recorder = &MockPortsBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortsBuilder) EXPECT() *MockPortsBuilderMockRecorder {
	return m.recorder
}

// GetContainerPorts mocks base method.
func (m *MockPortsBuilder) GetContainerPorts(ports ...ports.InstanaAgentPort) []v1.ContainerPort {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range ports {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContainerPorts", varargs...)
	ret0, _ := ret[0].([]v1.ContainerPort)
	return ret0
}

// GetContainerPorts indicates an expected call of GetContainerPorts.
func (mr *MockPortsBuilderMockRecorder) GetContainerPorts(ports ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerPorts", reflect.TypeOf((*MockPortsBuilder)(nil).GetContainerPorts), ports...)
}

// GetServicePorts mocks base method.
func (m *MockPortsBuilder) GetServicePorts(ports ...ports.InstanaAgentPort) []v1.ServicePort {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range ports {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetServicePorts", varargs...)
	ret0, _ := ret[0].([]v1.ServicePort)
	return ret0
}

// GetServicePorts indicates an expected call of GetServicePorts.
func (mr *MockPortsBuilderMockRecorder) GetServicePorts(ports ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServicePorts", reflect.TypeOf((*MockPortsBuilder)(nil).GetServicePorts), ports...)
}
