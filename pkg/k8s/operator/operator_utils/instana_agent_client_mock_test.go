// /*
// (c) Copyright IBM Corp. 2024
// (c) Copyright Instana Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */
//

// Code generated by MockGen. DO NOT EDIT.
package operator_utils

import (
	context "context"
	reflect "reflect"
	time "time"

	client "github.com/instana/instana-agent-operator/pkg/k8s/client"
	gomock "go.uber.org/mock/gomock"
	meta "k8s.io/apimachinery/pkg/api/meta"
	runtime "k8s.io/apimachinery/pkg/runtime"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	client0 "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockInstanaAgentClient is a mock of InstanaAgentClient interface.
type MockInstanaAgentClient struct {
	ctrl     *gomock.Controller
	recorder *MockInstanaAgentClientMockRecorder
}

// MockInstanaAgentClientMockRecorder is the mock recorder for MockInstanaAgentClient.
type MockInstanaAgentClientMockRecorder struct {
	mock *MockInstanaAgentClient
}

// NewMockInstanaAgentClient creates a new mock instance.
func NewMockInstanaAgentClient(ctrl *gomock.Controller) *MockInstanaAgentClient {
	mock := &MockInstanaAgentClient{ctrl: ctrl}
	mock.recorder = &MockInstanaAgentClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstanaAgentClient) EXPECT() *MockInstanaAgentClientMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockInstanaAgentClient) ISGOMOCK() struct{} {
	return struct{}{}
}

// Apply mocks base method.
func (m *MockInstanaAgentClient) Apply(ctx context.Context, obj client0.Object, opts ...client0.PatchOption) client.ObjectResult {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Apply", varargs...)
	ret0, _ := ret[0].(client.ObjectResult)
	return ret0
}

// Apply indicates an expected call of Apply.
func (mr *MockInstanaAgentClientMockRecorder) Apply(ctx, obj any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockInstanaAgentClient)(nil).Apply), varargs...)
}

// Create mocks base method.
func (m *MockInstanaAgentClient) Create(ctx context.Context, obj client0.Object, opts ...client0.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockInstanaAgentClientMockRecorder) Create(ctx, obj any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockInstanaAgentClient)(nil).Create), varargs...)
}

// Delete mocks base method.
func (m *MockInstanaAgentClient) Delete(ctx context.Context, obj client0.Object, opts ...client0.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockInstanaAgentClientMockRecorder) Delete(ctx, obj any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockInstanaAgentClient)(nil).Delete), varargs...)
}

// DeleteAllInTimeLimit mocks base method.
func (m *MockInstanaAgentClient) DeleteAllInTimeLimit(ctx context.Context, objects []client0.Object, timeout, waitTime time.Duration, opts ...client0.DeleteOption) client.MultiObjectResult {
	m.ctrl.T.Helper()
	varargs := []any{ctx, objects, timeout, waitTime}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllInTimeLimit", varargs...)
	ret0, _ := ret[0].(client.MultiObjectResult)
	return ret0
}

// DeleteAllInTimeLimit indicates an expected call of DeleteAllInTimeLimit.
func (mr *MockInstanaAgentClientMockRecorder) DeleteAllInTimeLimit(ctx, objects, timeout, waitTime any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, objects, timeout, waitTime}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllInTimeLimit", reflect.TypeOf((*MockInstanaAgentClient)(nil).DeleteAllInTimeLimit), varargs...)
}

// DeleteAllOf mocks base method.
func (m *MockInstanaAgentClient) DeleteAllOf(ctx context.Context, obj client0.Object, opts ...client0.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOf", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOf indicates an expected call of DeleteAllOf.
func (mr *MockInstanaAgentClientMockRecorder) DeleteAllOf(ctx, obj any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOf", reflect.TypeOf((*MockInstanaAgentClient)(nil).DeleteAllOf), varargs...)
}

// Exists mocks base method.
func (m *MockInstanaAgentClient) Exists(ctx context.Context, gvk schema.GroupVersionKind, key client0.ObjectKey) client.BoolResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, gvk, key)
	ret0, _ := ret[0].(client.BoolResult)
	return ret0
}

// Exists indicates an expected call of Exists.
func (mr *MockInstanaAgentClientMockRecorder) Exists(ctx, gvk, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockInstanaAgentClient)(nil).Exists), ctx, gvk, key)
}

// Get mocks base method.
func (m *MockInstanaAgentClient) Get(ctx context.Context, key client0.ObjectKey, obj client0.Object, opts ...client0.GetOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockInstanaAgentClientMockRecorder) Get(ctx, key, obj any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockInstanaAgentClient)(nil).Get), varargs...)
}

// GetAsResult mocks base method.
func (m *MockInstanaAgentClient) GetAsResult(ctx context.Context, key client0.ObjectKey, obj client0.Object, opts ...client0.GetOption) client.ObjectResult {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAsResult", varargs...)
	ret0, _ := ret[0].(client.ObjectResult)
	return ret0
}

// GetAsResult indicates an expected call of GetAsResult.
func (mr *MockInstanaAgentClientMockRecorder) GetAsResult(ctx, key, obj any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAsResult", reflect.TypeOf((*MockInstanaAgentClient)(nil).GetAsResult), varargs...)
}

// GroupVersionKindFor mocks base method.
func (m *MockInstanaAgentClient) GroupVersionKindFor(obj runtime.Object) (schema.GroupVersionKind, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupVersionKindFor", obj)
	ret0, _ := ret[0].(schema.GroupVersionKind)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupVersionKindFor indicates an expected call of GroupVersionKindFor.
func (mr *MockInstanaAgentClientMockRecorder) GroupVersionKindFor(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupVersionKindFor", reflect.TypeOf((*MockInstanaAgentClient)(nil).GroupVersionKindFor), obj)
}

// IsObjectNamespaced mocks base method.
func (m *MockInstanaAgentClient) IsObjectNamespaced(obj runtime.Object) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsObjectNamespaced", obj)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsObjectNamespaced indicates an expected call of IsObjectNamespaced.
func (mr *MockInstanaAgentClientMockRecorder) IsObjectNamespaced(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsObjectNamespaced", reflect.TypeOf((*MockInstanaAgentClient)(nil).IsObjectNamespaced), obj)
}

// List mocks base method.
func (m *MockInstanaAgentClient) List(ctx context.Context, list client0.ObjectList, opts ...client0.ListOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, list}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockInstanaAgentClientMockRecorder) List(ctx, list any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, list}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockInstanaAgentClient)(nil).List), varargs...)
}

// Patch mocks base method.
func (m *MockInstanaAgentClient) Patch(ctx context.Context, obj client0.Object, patch client0.Patch, opts ...client0.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Patch", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Patch indicates an expected call of Patch.
func (mr *MockInstanaAgentClientMockRecorder) Patch(ctx, obj, patch any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockInstanaAgentClient)(nil).Patch), varargs...)
}

// RESTMapper mocks base method.
func (m *MockInstanaAgentClient) RESTMapper() meta.RESTMapper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RESTMapper")
	ret0, _ := ret[0].(meta.RESTMapper)
	return ret0
}

// RESTMapper indicates an expected call of RESTMapper.
func (mr *MockInstanaAgentClientMockRecorder) RESTMapper() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RESTMapper", reflect.TypeOf((*MockInstanaAgentClient)(nil).RESTMapper))
}

// Scheme mocks base method.
func (m *MockInstanaAgentClient) Scheme() *runtime.Scheme {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scheme")
	ret0, _ := ret[0].(*runtime.Scheme)
	return ret0
}

// Scheme indicates an expected call of Scheme.
func (mr *MockInstanaAgentClientMockRecorder) Scheme() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scheme", reflect.TypeOf((*MockInstanaAgentClient)(nil).Scheme))
}

// Status mocks base method.
func (m *MockInstanaAgentClient) Status() client0.SubResourceWriter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(client0.SubResourceWriter)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockInstanaAgentClientMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockInstanaAgentClient)(nil).Status))
}

// SubResource mocks base method.
func (m *MockInstanaAgentClient) SubResource(subResource string) client0.SubResourceClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubResource", subResource)
	ret0, _ := ret[0].(client0.SubResourceClient)
	return ret0
}

// SubResource indicates an expected call of SubResource.
func (mr *MockInstanaAgentClientMockRecorder) SubResource(subResource any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubResource", reflect.TypeOf((*MockInstanaAgentClient)(nil).SubResource), subResource)
}

// Update mocks base method.
func (m *MockInstanaAgentClient) Update(ctx context.Context, obj client0.Object, opts ...client0.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockInstanaAgentClientMockRecorder) Update(ctx, obj any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockInstanaAgentClient)(nil).Update), varargs...)
}
