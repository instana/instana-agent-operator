// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/k8s/operator/lifecycle/lifecycle.go

// Package operator_utils is a generated GoMock package.
package operator_utils

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	client "github.com/instana/instana-agent-operator/pkg/k8s/client"
	client0 "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockDependentLifecycleManager is a mock of DependentLifecycleManager interface.
type MockDependentLifecycleManager struct {
	ctrl     *gomock.Controller
	recorder *MockDependentLifecycleManagerMockRecorder
}

// MockDependentLifecycleManagerMockRecorder is the mock recorder for MockDependentLifecycleManager.
type MockDependentLifecycleManagerMockRecorder struct {
	mock *MockDependentLifecycleManager
}

// NewMockDependentLifecycleManager creates a new mock instance.
func NewMockDependentLifecycleManager(ctrl *gomock.Controller) *MockDependentLifecycleManager {
	mock := &MockDependentLifecycleManager{ctrl: ctrl}
	mock.recorder = &MockDependentLifecycleManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDependentLifecycleManager) EXPECT() *MockDependentLifecycleManagerMockRecorder {
	return m.recorder
}

// DeleteAllDependents mocks base method.
func (m *MockDependentLifecycleManager) DeleteAllDependents() client.MultiObjectResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllDependents")
	ret0, _ := ret[0].(client.MultiObjectResult)
	return ret0
}

// DeleteAllDependents indicates an expected call of DeleteAllDependents.
func (mr *MockDependentLifecycleManagerMockRecorder) DeleteAllDependents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllDependents", reflect.TypeOf((*MockDependentLifecycleManager)(nil).DeleteAllDependents))
}

// DeleteOrphanedDependents mocks base method.
func (m *MockDependentLifecycleManager) DeleteOrphanedDependents(currentGenerationDependents []client0.Object) client.MultiObjectResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrphanedDependents", currentGenerationDependents)
	ret0, _ := ret[0].(client.MultiObjectResult)
	return ret0
}

// DeleteOrphanedDependents indicates an expected call of DeleteOrphanedDependents.
func (mr *MockDependentLifecycleManagerMockRecorder) DeleteOrphanedDependents(currentGenerationDependents interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrphanedDependents", reflect.TypeOf((*MockDependentLifecycleManager)(nil).DeleteOrphanedDependents), currentGenerationDependents)
}

// UpdateDependentLifecycleInfo mocks base method.
func (m *MockDependentLifecycleManager) UpdateDependentLifecycleInfo(currentGenerationDependents []client0.Object) client.MultiObjectResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDependentLifecycleInfo", currentGenerationDependents)
	ret0, _ := ret[0].(client.MultiObjectResult)
	return ret0
}

// UpdateDependentLifecycleInfo indicates an expected call of UpdateDependentLifecycleInfo.
func (mr *MockDependentLifecycleManagerMockRecorder) UpdateDependentLifecycleInfo(currentGenerationDependents interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDependentLifecycleInfo", reflect.TypeOf((*MockDependentLifecycleManager)(nil).UpdateDependentLifecycleInfo), currentGenerationDependents)
}
