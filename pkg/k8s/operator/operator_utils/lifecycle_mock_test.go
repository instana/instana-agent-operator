// /*
// (c) Copyright IBM Corp. 2024
// (c) Copyright Instana Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */
//

// Code generated by MockGen. DO NOT EDIT.
package operator_utils

import (
	reflect "reflect"

	client "github.com/instana/instana-agent-operator/pkg/k8s/client"
	gomock "go.uber.org/mock/gomock"
	client0 "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockDependentLifecycleManager is a mock of DependentLifecycleManager interface.
type MockDependentLifecycleManager struct {
	ctrl     *gomock.Controller
	recorder *MockDependentLifecycleManagerMockRecorder
}

// MockDependentLifecycleManagerMockRecorder is the mock recorder for MockDependentLifecycleManager.
type MockDependentLifecycleManagerMockRecorder struct {
	mock *MockDependentLifecycleManager
}

// NewMockDependentLifecycleManager creates a new mock instance.
func NewMockDependentLifecycleManager(ctrl *gomock.Controller) *MockDependentLifecycleManager {
	mock := &MockDependentLifecycleManager{ctrl: ctrl}
	mock.recorder = &MockDependentLifecycleManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDependentLifecycleManager) EXPECT() *MockDependentLifecycleManagerMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockDependentLifecycleManager) ISGOMOCK() struct{} {
	return struct{}{}
}

// DeleteAllDependents mocks base method.
func (m *MockDependentLifecycleManager) DeleteAllDependents() client.MultiObjectResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllDependents")
	ret0, _ := ret[0].(client.MultiObjectResult)
	return ret0
}

// DeleteAllDependents indicates an expected call of DeleteAllDependents.
func (mr *MockDependentLifecycleManagerMockRecorder) DeleteAllDependents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllDependents", reflect.TypeOf((*MockDependentLifecycleManager)(nil).DeleteAllDependents))
}

// DeleteOrphanedDependents mocks base method.
func (m *MockDependentLifecycleManager) DeleteOrphanedDependents(currentGenerationDependents []client0.Object) client.MultiObjectResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrphanedDependents", currentGenerationDependents)
	ret0, _ := ret[0].(client.MultiObjectResult)
	return ret0
}

// DeleteOrphanedDependents indicates an expected call of DeleteOrphanedDependents.
func (mr *MockDependentLifecycleManagerMockRecorder) DeleteOrphanedDependents(currentGenerationDependents any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrphanedDependents", reflect.TypeOf((*MockDependentLifecycleManager)(nil).DeleteOrphanedDependents), currentGenerationDependents)
}

// UpdateDependentLifecycleInfo mocks base method.
func (m *MockDependentLifecycleManager) UpdateDependentLifecycleInfo(currentGenerationDependents []client0.Object) client.MultiObjectResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDependentLifecycleInfo", currentGenerationDependents)
	ret0, _ := ret[0].(client.MultiObjectResult)
	return ret0
}

// UpdateDependentLifecycleInfo indicates an expected call of UpdateDependentLifecycleInfo.
func (mr *MockDependentLifecycleManagerMockRecorder) UpdateDependentLifecycleInfo(currentGenerationDependents any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDependentLifecycleInfo", reflect.TypeOf((*MockDependentLifecycleManager)(nil).UpdateDependentLifecycleInfo), currentGenerationDependents)
}
