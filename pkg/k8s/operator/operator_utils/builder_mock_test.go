// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/k8s/object/builders/builder/builder.go

// Package operator_utils is a generated GoMock package.
package operator_utils

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	builder "github.com/instana/instana-agent-operator/pkg/k8s/object/builders/builder"
)

// MockObjectBuilder is a mock of ObjectBuilder interface.
type MockObjectBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockObjectBuilderMockRecorder
}

// MockObjectBuilderMockRecorder is the mock recorder for MockObjectBuilder.
type MockObjectBuilderMockRecorder struct {
	mock *MockObjectBuilder
}

// NewMockObjectBuilder creates a new mock instance.
func NewMockObjectBuilder(ctrl *gomock.Controller) *MockObjectBuilder {
	mock := &MockObjectBuilder{ctrl: ctrl}
	mock.recorder = &MockObjectBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectBuilder) EXPECT() *MockObjectBuilderMockRecorder {
	return m.recorder
}

// Build mocks base method.
func (m *MockObjectBuilder) Build() builder.OptionalObject {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build")
	ret0, _ := ret[0].(builder.OptionalObject)
	return ret0
}

// Build indicates an expected call of Build.
func (mr *MockObjectBuilderMockRecorder) Build() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockObjectBuilder)(nil).Build))
}

// ComponentName mocks base method.
func (m *MockObjectBuilder) ComponentName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComponentName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ComponentName indicates an expected call of ComponentName.
func (mr *MockObjectBuilderMockRecorder) ComponentName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComponentName", reflect.TypeOf((*MockObjectBuilder)(nil).ComponentName))
}

// IsNamespaced mocks base method.
func (m *MockObjectBuilder) IsNamespaced() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNamespaced")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNamespaced indicates an expected call of IsNamespaced.
func (mr *MockObjectBuilderMockRecorder) IsNamespaced() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNamespaced", reflect.TypeOf((*MockObjectBuilder)(nil).IsNamespaced))
}

// MockBuilderTransformer is a mock of BuilderTransformer interface.
type MockBuilderTransformer struct {
	ctrl     *gomock.Controller
	recorder *MockBuilderTransformerMockRecorder
}

// MockBuilderTransformerMockRecorder is the mock recorder for MockBuilderTransformer.
type MockBuilderTransformerMockRecorder struct {
	mock *MockBuilderTransformer
}

// NewMockBuilderTransformer creates a new mock instance.
func NewMockBuilderTransformer(ctrl *gomock.Controller) *MockBuilderTransformer {
	mock := &MockBuilderTransformer{ctrl: ctrl}
	mock.recorder = &MockBuilderTransformerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuilderTransformer) EXPECT() *MockBuilderTransformerMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockBuilderTransformer) Apply(bldr builder.ObjectBuilder) builder.OptionalObject {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", bldr)
	ret0, _ := ret[0].(builder.OptionalObject)
	return ret0
}

// Apply indicates an expected call of Apply.
func (mr *MockBuilderTransformerMockRecorder) Apply(bldr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockBuilderTransformer)(nil).Apply), bldr)
}
